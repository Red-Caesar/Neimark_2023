2023-02-16 14:18:36 [INFO] [task_scheduler.cc:158] Initializing Task #20: "fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu"
2023-02-16 14:18:36 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 16, 56, 56, 4), "float32"], p1: T.Buffer[(8, 16, 1, 1, 4, 32), "float32"], p2: T.Buffer[(1, 8, 56, 56, 32), "float32"], p3: T.Buffer[(1, 8, 1, 1, 32), "float32"], T_relu: T.Buffer[(1, 8, 56, 56, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        conv2d_NCHWc = T.alloc_buffer([1, 8, 56, 56, 32], dtype="float32")
        T_add = T.alloc_buffer([1, 8, 56, 56, 32], dtype="float32")
        T_add_1 = T.alloc_buffer([1, 8, 56, 56, 32], dtype="float32")
        for i0, i1, i2, i3, i4, i5, i6, i7 in T.grid(1, 8, 56, 56, 32, 64, 1, 1):
            with T.block("conv2d_NCHWc"):
                n, oc_chunk, oh, ow, oc_block, ic, kh, kw = T.axis.remap("SSSSSRRR", [i0, i1, i2, i3, i4, i5, i6, i7])
                T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                with T.init():
                    conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
        for i0, i1, i2, i3, i4 in T.grid(1, 8, 56, 56, 32):
            with T.block("T_add"):
                ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4], p2[ax0, ax1, ax2, ax3, ax4])
                T.writes(T_add[ax0, ax1, ax2, ax3, ax4])
                T_add[ax0, ax1, ax2, ax3, ax4] = conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4] + p2[ax0, ax1, ax2, ax3, ax4]
        for i0, i1, i2, i3, i4 in T.grid(1, 8, 56, 56, 32):
            with T.block("T_add_1"):
                ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(T_add[ax0, ax1, ax2, ax3, ax4], p3[ax0, ax1, 0, 0, ax4])
                T.writes(T_add_1[ax0, ax1, ax2, ax3, ax4])
                T_add_1[ax0, ax1, ax2, ax3, ax4] = T_add[ax0, ax1, ax2, ax3, ax4] + p3[ax0, ax1, 0, 0, ax4]
        for i0, i1, i2, i3, i4 in T.grid(1, 8, 56, 56, 32):
            with T.block("T_relu"):
                ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(T_add_1[ax0, ax1, ax2, ax3, ax4])
                T.writes(T_relu[ax0, ax1, ax2, ax3, ax4])
                T_relu[ax0, ax1, ax2, ax3, ax4] = T.max(T_add_1[ax0, ax1, ax2, ax3, ax4], T.float32(0))
    

2023-02-16 14:18:37 [INFO] [task_scheduler.cc:162] Total 3 design space(s) generated
2023-02-16 14:18:37 [INFO] [task_scheduler.cc:168] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 16, 56, 56, 4), "float32"], p1: T.Buffer[(8, 16, 1, 1, 4, 32), "float32"], p2: T.Buffer[(1, 8, 56, 56, 32), "float32"], p3: T.Buffer[(1, 8, 1, 1, 32), "float32"], T_relu: T.Buffer[(1, 8, 56, 56, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":16, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 8, 56, 56, 32], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0, i0_1, i1_1, i2_1, i3_1, i4_1, i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(1, 1, 7, 7, 1, 1, 1, 1, 2, 16, 1, 1, 1, 1, 4, 4, 1, 1, 64, 1, 1, 1, 2, 2, 4, 2):
                with T.block("conv2d_NCHWc"):
                    n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                    oc_chunk = T.axis.spatial(8, i1_0 * 8 + i1_1 * 8 + i1_2 * 2 + i1_3)
                    oh = T.axis.spatial(56, i2_0 * 8 + i2_1 * 8 + i2_2 * 2 + i2_3)
                    ow = T.axis.spatial(56, i3_0 * 8 + i3_1 * 4 + i3_2 * 4 + i3_3)
                    oc_block = T.axis.spatial(32, i4_0 * 32 + i4_1 * 2 + i4_2 * 2 + i4_3)
                    ic = T.axis.reduce(64, i5_0 * 64 + i5_1)
                    kh = T.axis.reduce(1, i6_0 + i6_1)
                    kw = T.axis.reduce(1, i7_1 + i7_0)
                    T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                    T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                    T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                    conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
            for i0, i1, i2, i3, i4 in T.grid(1, 8, 56, 56, 32):
                with T.block("T_relu"):
                    ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4], p2[ax0, ax1, ax2, ax3, ax4], p3[ax0, ax1, 0, 0, ax4])
                    T.writes(T_relu[ax0, ax1, ax2, ax3, ax4])
                    T_relu[ax0, ax1, ax2, ax3, ax4] = T.max(conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4] + p2[ax0, ax1, ax2, ax3, ax4] + p3[ax0, ax1, 0, 0, ax4], T.float32(0))
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 4, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 4, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 2, 1, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 16, 1, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2023-02-16 14:18:37 [INFO] [task_scheduler.cc:168] Design space #1:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 16, 56, 56, 4), "float32"], p1: T.Buffer[(8, 16, 1, 1, 4, 32), "float32"], p2: T.Buffer[(1, 8, 56, 56, 32), "float32"], p3: T.Buffer[(1, 8, 1, 1, 32), "float32"], T_relu: T.Buffer[(1, 8, 56, 56, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":512, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 8, 56, 56, 32], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0, i0_1, i1_1, i2_1, i3_1, i4_1 in T.grid(1, 1, 7, 7, 1, 1, 1, 1, 2, 16):
                for i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(1, 1, 1, 1, 4, 4, 1, 1, 64, 1, 1, 1, 2, 2, 4, 2):
                    with T.block("conv2d_NCHWc"):
                        n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                        oc_chunk = T.axis.spatial(8, i1_0 * 8 + i1_1 * 8 + i1_2 * 2 + i1_3)
                        oh = T.axis.spatial(56, i2_0 * 8 + i2_1 * 8 + i2_2 * 2 + i2_3)
                        ow = T.axis.spatial(56, i3_0 * 8 + i3_1 * 4 + i3_2 * 4 + i3_3)
                        oc_block = T.axis.spatial(32, i4_0 * 32 + i4_1 * 2 + i4_2 * 2 + i4_3)
                        ic = T.axis.reduce(64, i5_0 * 64 + i5_1)
                        kh = T.axis.reduce(1, i6_0 + i6_1)
                        kw = T.axis.reduce(1, i7_1 + i7_0)
                        T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                        T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                        T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(1, 8, 8, 4, 2):
                    with T.block("T_relu"):
                        ax0_1, ax1_1 = T.axis.remap("SS", [ax0, ax1])
                        ax2_1 = T.axis.spatial(56, i2_0 * 8 + ax2)
                        ax3_1 = T.axis.spatial(56, i3_0 * 8 + i3_1 * 4 + ax3)
                        ax4_1 = T.axis.spatial(32, i4_1 * 2 + ax4)
                        T.reads(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p3[ax0_1, ax1_1, 0, 0, ax4_1])
                        T.writes(T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] = T.max(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p3[ax0_1, ax1_1, 0, 0, ax4_1], T.float32(0))
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 4, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 4, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 2, 1, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 16, 1, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
2023-02-16 14:18:37 [INFO] [task_scheduler.cc:168] Design space #2:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 16, 56, 56, 4), "float32"], p1: T.Buffer[(8, 16, 1, 1, 4, 32), "float32"], p2: T.Buffer[(1, 8, 56, 56, 32), "float32"], p3: T.Buffer[(1, 8, 1, 1, 32), "float32"], T_relu: T.Buffer[(1, 8, 56, 56, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":0, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 8, 56, 56, 32], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0 in T.grid(1, 1, 7, 7, 1):
                for i0_1, i1_1, i2_1, i3_1, i4_1, i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(1, 1, 1, 2, 16, 1, 1, 1, 1, 4, 4, 1, 1, 64, 1, 1, 1, 2, 2, 4, 2):
                    with T.block("conv2d_NCHWc"):
                        n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                        oc_chunk = T.axis.spatial(8, i1_0 * 8 + i1_1 * 8 + i1_2 * 2 + i1_3)
                        oh = T.axis.spatial(56, i2_0 * 8 + i2_1 * 8 + i2_2 * 2 + i2_3)
                        ow = T.axis.spatial(56, i3_0 * 8 + i3_1 * 4 + i3_2 * 4 + i3_3)
                        oc_block = T.axis.spatial(32, i4_0 * 32 + i4_1 * 2 + i4_2 * 2 + i4_3)
                        ic = T.axis.reduce(64, i5_0 * 64 + i5_1)
                        kh = T.axis.reduce(1, i6_0 + i6_1)
                        kw = T.axis.reduce(1, i7_1 + i7_0)
                        T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                        T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                        T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(1, 8, 8, 8, 32):
                    with T.block("T_relu"):
                        ax0_1, ax1_1 = T.axis.remap("SS", [ax0, ax1])
                        ax2_1 = T.axis.spatial(56, i2_0 * 8 + ax2)
                        ax3_1 = T.axis.spatial(56, i3_0 * 8 + ax3)
                        ax4_1 = T.axis.spatial(32, ax4)
                        T.reads(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p3[ax0_1, ax1_1, 0, 0, ax4_1])
                        T.writes(T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] = T.max(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p3[ax0_1, ax1_1, 0, 0, ax4_1], T.float32(0))
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 4, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 4, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 2, 1, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 16, 1, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
2023-02-16 14:20:37 [INFO] [task_scheduler.cc:158] Initializing Task #20: "fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu"
2023-02-16 14:20:37 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 16, 56, 56, 4), "float32"], p1: T.Buffer[(8, 16, 1, 1, 4, 32), "float32"], p2: T.Buffer[(1, 8, 56, 56, 32), "float32"], p3: T.Buffer[(1, 8, 1, 1, 32), "float32"], T_relu: T.Buffer[(1, 8, 56, 56, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        conv2d_NCHWc = T.alloc_buffer([1, 8, 56, 56, 32], dtype="float32")
        T_add = T.alloc_buffer([1, 8, 56, 56, 32], dtype="float32")
        T_add_1 = T.alloc_buffer([1, 8, 56, 56, 32], dtype="float32")
        for i0, i1, i2, i3, i4, i5, i6, i7 in T.grid(1, 8, 56, 56, 32, 64, 1, 1):
            with T.block("conv2d_NCHWc"):
                n, oc_chunk, oh, ow, oc_block, ic, kh, kw = T.axis.remap("SSSSSRRR", [i0, i1, i2, i3, i4, i5, i6, i7])
                T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                with T.init():
                    conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
        for i0, i1, i2, i3, i4 in T.grid(1, 8, 56, 56, 32):
            with T.block("T_add"):
                ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4], p2[ax0, ax1, ax2, ax3, ax4])
                T.writes(T_add[ax0, ax1, ax2, ax3, ax4])
                T_add[ax0, ax1, ax2, ax3, ax4] = conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4] + p2[ax0, ax1, ax2, ax3, ax4]
        for i0, i1, i2, i3, i4 in T.grid(1, 8, 56, 56, 32):
            with T.block("T_add_1"):
                ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(T_add[ax0, ax1, ax2, ax3, ax4], p3[ax0, ax1, 0, 0, ax4])
                T.writes(T_add_1[ax0, ax1, ax2, ax3, ax4])
                T_add_1[ax0, ax1, ax2, ax3, ax4] = T_add[ax0, ax1, ax2, ax3, ax4] + p3[ax0, ax1, 0, 0, ax4]
        for i0, i1, i2, i3, i4 in T.grid(1, 8, 56, 56, 32):
            with T.block("T_relu"):
                ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(T_add_1[ax0, ax1, ax2, ax3, ax4])
                T.writes(T_relu[ax0, ax1, ax2, ax3, ax4])
                T_relu[ax0, ax1, ax2, ax3, ax4] = T.max(T_add_1[ax0, ax1, ax2, ax3, ax4], T.float32(0))
    

2023-02-16 14:20:37 [INFO] [task_scheduler.cc:162] Total 3 design space(s) generated
2023-02-16 14:20:37 [INFO] [task_scheduler.cc:168] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 16, 56, 56, 4), "float32"], p1: T.Buffer[(8, 16, 1, 1, 4, 32), "float32"], p2: T.Buffer[(1, 8, 56, 56, 32), "float32"], p3: T.Buffer[(1, 8, 1, 1, 32), "float32"], T_relu: T.Buffer[(1, 8, 56, 56, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":16, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 8, 56, 56, 32], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0, i0_1, i1_1, i2_1, i3_1, i4_1, i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(1, 1, 1, 2, 16, 1, 1, 1, 2, 1, 8, 1, 1, 1, 2, 1, 1, 2, 8, 1, 1, 1, 4, 56, 14, 1):
                with T.block("conv2d_NCHWc"):
                    n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                    oc_chunk = T.axis.spatial(8, i1_0 * 8 + i1_1 * 8 + i1_2 * 4 + i1_3)
                    oh = T.axis.spatial(56, i2_0 * 56 + i2_1 * 56 + i2_2 * 56 + i2_3)
                    ow = T.axis.spatial(56, i3_0 * 28 + i3_1 * 14 + i3_2 * 14 + i3_3)
                    oc_block = T.axis.spatial(32, i4_0 * 2 + i4_1 * 2 + i4_2 + i4_3)
                    ic = T.axis.reduce(64, i5_0 * 8 + i5_1)
                    kh = T.axis.reduce(1, i6_0 + i6_1)
                    kw = T.axis.reduce(1, i7_1 + i7_0)
                    T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                    T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                    T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                    conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
            for i0, i1, i2, i3, i4 in T.grid(1, 8, 56, 56, 32):
                with T.block("T_relu"):
                    ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4], p2[ax0, ax1, ax2, ax3, ax4], p3[ax0, ax1, 0, 0, ax4])
                    T.writes(T_relu[ax0, ax1, ax2, ax3, ax4])
                    T_relu[ax0, ax1, ax2, ax3, ax4] = T.max(conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4] + p2[ax0, ax1, ax2, ax3, ax4] + p3[ax0, ax1, 0, 0, ax4], T.float32(0))
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 56])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[16, 1, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2023-02-16 14:20:37 [INFO] [task_scheduler.cc:168] Design space #1:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 16, 56, 56, 4), "float32"], p1: T.Buffer[(8, 16, 1, 1, 4, 32), "float32"], p2: T.Buffer[(1, 8, 56, 56, 32), "float32"], p3: T.Buffer[(1, 8, 1, 1, 32), "float32"], T_relu: T.Buffer[(1, 8, 56, 56, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":0, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 8, 56, 56, 32], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0, i0_1, i1_1, i2_1, i3_1, i4_1 in T.grid(1, 1, 1, 2, 16, 1, 1, 1, 2, 1):
                for i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(8, 1, 1, 1, 2, 1, 1, 2, 8, 1, 1, 1, 4, 56, 14, 1):
                    with T.block("conv2d_NCHWc"):
                        n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                        oc_chunk = T.axis.spatial(8, i1_0 * 8 + i1_1 * 8 + i1_2 * 4 + i1_3)
                        oh = T.axis.spatial(56, i2_0 * 56 + i2_1 * 56 + i2_2 * 56 + i2_3)
                        ow = T.axis.spatial(56, i3_0 * 28 + i3_1 * 14 + i3_2 * 14 + i3_3)
                        oc_block = T.axis.spatial(32, i4_0 * 2 + i4_1 * 2 + i4_2 + i4_3)
                        ic = T.axis.reduce(64, i5_0 * 8 + i5_1)
                        kh = T.axis.reduce(1, i6_0 + i6_1)
                        kw = T.axis.reduce(1, i7_1 + i7_0)
                        T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                        T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                        T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(1, 8, 56, 14, 2):
                    with T.block("T_relu"):
                        ax0_1, ax1_1, ax2_1 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        ax3_1 = T.axis.spatial(56, i3_0 * 28 + i3_1 * 14 + ax3)
                        ax4_1 = T.axis.spatial(32, i4_0 * 2 + ax4)
                        T.reads(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p3[ax0_1, ax1_1, 0, 0, ax4_1])
                        T.writes(T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] = T.max(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p3[ax0_1, ax1_1, 0, 0, ax4_1], T.float32(0))
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 56])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[16, 1, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
2023-02-16 14:20:37 [INFO] [task_scheduler.cc:168] Design space #2:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 16, 56, 56, 4), "float32"], p1: T.Buffer[(8, 16, 1, 1, 4, 32), "float32"], p2: T.Buffer[(1, 8, 56, 56, 32), "float32"], p3: T.Buffer[(1, 8, 1, 1, 32), "float32"], T_relu: T.Buffer[(1, 8, 56, 56, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":0, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 8, 56, 56, 32], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0 in T.grid(1, 1, 1, 2, 16):
                for i0_1, i1_1, i2_1, i3_1, i4_1, i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(1, 1, 1, 2, 1, 8, 1, 1, 1, 2, 1, 1, 2, 8, 1, 1, 1, 4, 56, 14, 1):
                    with T.block("conv2d_NCHWc"):
                        n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                        oc_chunk = T.axis.spatial(8, i1_0 * 8 + i1_1 * 8 + i1_2 * 4 + i1_3)
                        oh = T.axis.spatial(56, i2_0 * 56 + i2_1 * 56 + i2_2 * 56 + i2_3)
                        ow = T.axis.spatial(56, i3_0 * 28 + i3_1 * 14 + i3_2 * 14 + i3_3)
                        oc_block = T.axis.spatial(32, i4_0 * 2 + i4_1 * 2 + i4_2 + i4_3)
                        ic = T.axis.reduce(64, i5_0 * 8 + i5_1)
                        kh = T.axis.reduce(1, i6_0 + i6_1)
                        kw = T.axis.reduce(1, i7_1 + i7_0)
                        T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                        T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                        T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(1, 8, 56, 28, 2):
                    with T.block("T_relu"):
                        ax0_1, ax1_1, ax2_1 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        ax3_1 = T.axis.spatial(56, i3_0 * 28 + ax3)
                        ax4_1 = T.axis.spatial(32, i4_0 * 2 + ax4)
                        T.reads(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p3[ax0_1, ax1_1, 0, 0, ax4_1])
                        T.writes(T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] = T.max(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p3[ax0_1, ax1_1, 0, 0, ax4_1], T.float32(0))
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 56])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[16, 1, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
2023-02-16 14:45:13 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-02-16 14:45:13 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2023-02-16 14:45:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1f747648)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x31e1c558)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1f7e4ad8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1f1c7eb8)]: 0 failure(s)
2023-02-16 14:45:13 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2023-02-16 14:45:14 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1f747648)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x31e1c558)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1f7e4ad8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1f1c7eb8)]: 0 failure(s)
2023-02-16 14:45:15 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1f747648)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x31e1c558)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1f7e4ad8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1f1c7eb8)]: 0 failure(s)
2023-02-16 14:45:16 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1f747648)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x31e1c558)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1f7e4ad8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1f1c7eb8)]: 0 failure(s)
2023-02-16 14:45:17 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1f747648)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x31e1c558)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1f7e4ad8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1f1c7eb8)]: 0 failure(s)
2023-02-16 14:45:17 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9994  0.9990  0.9974  0.9973  0.9971  0.9966  0.9963  0.9958  0.9958  0.9951  0.9937  0.9932  0.9915  0.9915  0.9912
[17 : 32]:	0.9893  0.9890  0.9889  0.9878  0.9877  0.9876  0.9870  0.9869  0.9868  0.9859  0.9857  0.9857  0.9850  0.9847  0.9847  0.9846
[33 : 48]:	0.9842  0.9842  0.9830  0.9828  0.9828  0.9826  0.9817  0.9814  0.9811  0.9808  0.9806  0.9805  0.9803  0.9799  0.9795  0.9795
[49 : 64]:	0.9788  0.9785  0.9784  0.9780  0.9778  0.9777  0.9772  0.9770  0.9765  0.9764  0.9764  0.9762  0.9762  0.9762  0.9742  0.9735
2023-02-16 14:45:17 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-02-16 14:45:17 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #1: GFLOPs: 20.3434. Time: 5169.6857 us. Best GFLOPs: 20.3434
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #2: GFLOPs: 7.1949. Time: 14617.1896 us. Best GFLOPs: 20.3434
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #3: GFLOPs: 22.2648. Time: 4723.5459 us. Best GFLOPs: 22.2648
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #4: GFLOPs: 71.3044. Time: 1474.9291 us. Best GFLOPs: 71.3044
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #5: GFLOPs: 31.5203. Time: 3336.5501 us. Best GFLOPs: 71.3044
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #6: GFLOPs: 27.2165. Time: 3864.1647 us. Best GFLOPs: 71.3044
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #7: GFLOPs: 28.4158. Time: 3701.0755 us. Best GFLOPs: 71.3044
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #8: GFLOPs: 85.7406. Time: 1226.5937 us. Best GFLOPs: 85.7406
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #9: GFLOPs: 21.9340. Time: 4794.7980 us. Best GFLOPs: 85.7406
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #10: GFLOPs: 15.4589. Time: 6803.1143 us. Best GFLOPs: 85.7406
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #11: GFLOPs: 8.9474. Time: 11754.1804 us. Best GFLOPs: 85.7406
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #12: GFLOPs: 39.7951. Time: 2642.7588 us. Best GFLOPs: 85.7406
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #13: GFLOPs: 77.6375. Time: 1354.6140 us. Best GFLOPs: 85.7406
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #14: GFLOPs: 40.3554. Time: 2606.0676 us. Best GFLOPs: 85.7406
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #15: GFLOPs: 34.9761. Time: 3006.8822 us. Best GFLOPs: 85.7406
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #16: GFLOPs: 83.8536. Time: 1254.1960 us. Best GFLOPs: 85.7406
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #17: GFLOPs: 14.2955. Time: 7356.7962 us. Best GFLOPs: 85.7406
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #18: GFLOPs: 21.7459. Time: 4836.2652 us. Best GFLOPs: 85.7406
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #19: GFLOPs: 54.2797. Time: 1937.5356 us. Best GFLOPs: 85.7406
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #20: GFLOPs: 58.3530. Time: 1802.2888 us. Best GFLOPs: 85.7406
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #21: GFLOPs: 25.1325. Time: 4184.5851 us. Best GFLOPs: 85.7406
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #22: GFLOPs: 118.0312. Time: 891.0266 us. Best GFLOPs: 118.0312
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #23: GFLOPs: 27.2450. Time: 3860.1142 us. Best GFLOPs: 118.0312
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #24: GFLOPs: 37.2042. Time: 2826.8027 us. Best GFLOPs: 118.0312
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #25: GFLOPs: 88.9011. Time: 1182.9878 us. Best GFLOPs: 118.0312
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #26: GFLOPs: 102.1692. Time: 1029.3604 us. Best GFLOPs: 118.0312
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #27: GFLOPs: 18.0259. Time: 5834.3256 us. Best GFLOPs: 118.0312
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #28: GFLOPs: 75.7932. Time: 1387.5768 us. Best GFLOPs: 118.0312
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #29: GFLOPs: 27.8390. Time: 3777.7498 us. Best GFLOPs: 118.0312
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #30: GFLOPs: 168.6243. Time: 623.6878 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #31: GFLOPs: 12.5508. Time: 8379.4438 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #32: GFLOPs: 53.6936. Time: 1958.6841 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #33: GFLOPs: 17.1105. Time: 6146.4521 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #34: GFLOPs: 21.1831. Time: 4964.7453 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #35: GFLOPs: 7.7142. Time: 13633.0880 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #36: GFLOPs: 12.8551. Time: 8181.0973 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #37: GFLOPs: 16.9332. Time: 6210.8257 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #38: GFLOPs: 35.3224. Time: 2977.3987 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #39: GFLOPs: 17.1778. Time: 6122.3873 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #40: GFLOPs: 26.6986. Time: 3939.1129 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #41: GFLOPs: 48.8498. Time: 2152.9026 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #42: GFLOPs: 147.0549. Time: 715.1677 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #43: GFLOPs: 8.2803. Time: 12701.0517 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #44: GFLOPs: 74.1115. Time: 1419.0625 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #45: GFLOPs: 20.4244. Time: 5149.1846 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #46: GFLOPs: 22.9822. Time: 4576.1026 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #47: GFLOPs: 92.3272. Time: 1139.0892 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #48: GFLOPs: 14.1497. Time: 7432.5898 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #49: GFLOPs: 40.3206. Time: 2608.3138 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #50: GFLOPs: 63.8890. Time: 1646.1198 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #51: GFLOPs: 27.8648. Time: 3774.2513 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #52: GFLOPs: 16.8803. Time: 6230.2590 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #53: GFLOPs: 8.3595. Time: 12580.7113 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #54: GFLOPs: 52.7573. Time: 1993.4488 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #55: GFLOPs: 36.0917. Time: 2913.9396 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #56: GFLOPs: 11.7441. Time: 8955.0515 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #57: GFLOPs: 11.2293. Time: 9365.5890 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #58: GFLOPs: 75.7425. Time: 1388.5060 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #59: GFLOPs: 21.3791. Time: 4919.2290 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #60: GFLOPs: 54.7792. Time: 1919.8702 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #61: GFLOPs: 13.9485. Time: 7539.8236 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #62: GFLOPs: 47.4092. Time: 2218.3227 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #63: GFLOPs: 14.3718. Time: 7317.7163 us. Best GFLOPs: 168.6243
2023-02-16 15:36:25 [INFO] [task_scheduler.cc:129] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #64: GFLOPs: 36.5751. Time: 2875.4202 us. Best GFLOPs: 168.6243
