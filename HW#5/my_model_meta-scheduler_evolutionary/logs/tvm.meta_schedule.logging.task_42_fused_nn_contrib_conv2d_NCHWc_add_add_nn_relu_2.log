2023-02-16 14:18:38 [INFO] [task_scheduler.cc:158] Initializing Task #42: "fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2"
2023-02-16 14:18:38 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 1, 14, 14, 256), "float32"], p1: T.Buffer[(16, 1, 1, 1, 256, 64), "float32"], p2: T.Buffer[(1, 16, 14, 14, 64), "float32"], p3: T.Buffer[(1, 16, 1, 1, 64), "float32"], T_relu: T.Buffer[(1, 16, 14, 14, 64), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        conv2d_NCHWc = T.alloc_buffer([1, 16, 14, 14, 64], dtype="float32")
        T_add = T.alloc_buffer([1, 16, 14, 14, 64], dtype="float32")
        T_add_1 = T.alloc_buffer([1, 16, 14, 14, 64], dtype="float32")
        for i0, i1, i2, i3, i4, i5, i6, i7 in T.grid(1, 16, 14, 14, 64, 256, 1, 1):
            with T.block("conv2d_NCHWc"):
                n, oc_chunk, oh, ow, oc_block, ic, kh, kw = T.axis.remap("SSSSSRRR", [i0, i1, i2, i3, i4, i5, i6, i7])
                T.reads(p0[n, ic // 256, oh + kh, ow + kw, ic % 256], p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block])
                T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                with T.init():
                    conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 256, oh + kh, ow + kw, ic % 256] * p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block]
        for i0, i1, i2, i3, i4 in T.grid(1, 16, 14, 14, 64):
            with T.block("T_add"):
                ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4], p2[ax0, ax1, ax2, ax3, ax4])
                T.writes(T_add[ax0, ax1, ax2, ax3, ax4])
                T_add[ax0, ax1, ax2, ax3, ax4] = conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4] + p2[ax0, ax1, ax2, ax3, ax4]
        for i0, i1, i2, i3, i4 in T.grid(1, 16, 14, 14, 64):
            with T.block("T_add_1"):
                ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(T_add[ax0, ax1, ax2, ax3, ax4], p3[ax0, ax1, 0, 0, ax4])
                T.writes(T_add_1[ax0, ax1, ax2, ax3, ax4])
                T_add_1[ax0, ax1, ax2, ax3, ax4] = T_add[ax0, ax1, ax2, ax3, ax4] + p3[ax0, ax1, 0, 0, ax4]
        for i0, i1, i2, i3, i4 in T.grid(1, 16, 14, 14, 64):
            with T.block("T_relu"):
                ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(T_add_1[ax0, ax1, ax2, ax3, ax4])
                T.writes(T_relu[ax0, ax1, ax2, ax3, ax4])
                T_relu[ax0, ax1, ax2, ax3, ax4] = T.max(T_add_1[ax0, ax1, ax2, ax3, ax4], T.float32(0))
    

2023-02-16 14:18:38 [INFO] [task_scheduler.cc:162] Total 3 design space(s) generated
2023-02-16 14:18:38 [INFO] [task_scheduler.cc:168] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 1, 14, 14, 256), "float32"], p1: T.Buffer[(16, 1, 1, 1, 256, 64), "float32"], p2: T.Buffer[(1, 16, 14, 14, 64), "float32"], p3: T.Buffer[(1, 16, 1, 1, 64), "float32"], T_relu: T.Buffer[(1, 16, 14, 14, 64), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":16, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 16, 14, 14, 64], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0, i0_1, i1_1, i2_1, i3_1, i4_1, i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(1, 8, 1, 1, 16, 1, 1, 7, 2, 1, 64, 1, 1, 1, 1, 1, 7, 4, 4, 1, 1, 1, 2, 2, 1, 1):
                with T.block("conv2d_NCHWc"):
                    n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                    oc_chunk = T.axis.spatial(16, i1_0 * 2 + i1_1 * 2 + i1_2 * 2 + i1_3)
                    oh = T.axis.spatial(14, i2_0 * 14 + i2_1 * 2 + i2_2 * 2 + i2_3)
                    ow = T.axis.spatial(14, i3_3 + i3_0 * 14 + i3_1 * 7 + i3_2)
                    oc_block = T.axis.spatial(64, i4_0 * 4 + i4_1 * 4 + i4_2 + i4_3)
                    ic = T.axis.reduce(256, i5_0 * 4 + i5_1)
                    kh = T.axis.reduce(1, i6_0 + i6_1)
                    kw = T.axis.reduce(1, i7_1 + i7_0)
                    T.reads(p0[n, ic // 256, oh + kh, ow + kw, ic % 256], p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block])
                    T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                    T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                    conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 256, oh + kh, ow + kw, ic % 256] * p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block]
            for i0, i1, i2, i3, i4 in T.grid(1, 16, 14, 14, 64):
                with T.block("T_relu"):
                    ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4], p2[ax0, ax1, ax2, ax3, ax4], p3[ax0, ax1, 0, 0, ax4])
                    T.writes(T_relu[ax0, ax1, ax2, ax3, ax4])
                    T_relu[ax0, ax1, ax2, ax3, ax4] = T.max(conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4] + p2[ax0, ax1, ax2, ax3, ax4] + p3[ax0, ax1, 0, 0, ax4], T.float32(0))
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[16, 1, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2023-02-16 14:18:38 [INFO] [task_scheduler.cc:168] Design space #1:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 1, 14, 14, 256), "float32"], p1: T.Buffer[(16, 1, 1, 1, 256, 64), "float32"], p2: T.Buffer[(1, 16, 14, 14, 64), "float32"], p3: T.Buffer[(1, 16, 1, 1, 64), "float32"], T_relu: T.Buffer[(1, 16, 14, 14, 64), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":0, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 16, 14, 14, 64], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0, i0_1, i1_1, i2_1, i3_1, i4_1 in T.grid(1, 8, 1, 1, 16, 1, 1, 7, 2, 1):
                for i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(64, 1, 1, 1, 1, 1, 7, 4, 4, 1, 1, 1, 2, 2, 1, 1):
                    with T.block("conv2d_NCHWc"):
                        n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                        oc_chunk = T.axis.spatial(16, i1_0 * 2 + i1_1 * 2 + i1_2 * 2 + i1_3)
                        oh = T.axis.spatial(14, i2_0 * 14 + i2_1 * 2 + i2_2 * 2 + i2_3)
                        ow = T.axis.spatial(14, i3_3 + i3_0 * 14 + i3_1 * 7 + i3_2)
                        oc_block = T.axis.spatial(64, i4_0 * 4 + i4_1 * 4 + i4_2 + i4_3)
                        ic = T.axis.reduce(256, i5_0 * 4 + i5_1)
                        kh = T.axis.reduce(1, i6_0 + i6_1)
                        kw = T.axis.reduce(1, i7_1 + i7_0)
                        T.reads(p0[n, ic // 256, oh + kh, ow + kw, ic % 256], p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block])
                        T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                        T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 256, oh + kh, ow + kw, ic % 256] * p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(1, 2, 2, 7, 4):
                    with T.block("T_relu"):
                        ax0_1 = T.axis.spatial(1, ax0)
                        ax1_1 = T.axis.spatial(16, i1_0 * 2 + ax1)
                        ax2_1 = T.axis.spatial(14, i2_1 * 2 + ax2)
                        ax3_1 = T.axis.spatial(14, i3_1 * 7 + ax3)
                        ax4_1 = T.axis.spatial(64, i4_0 * 4 + ax4)
                        T.reads(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p3[ax0_1, ax1_1, 0, 0, ax4_1])
                        T.writes(T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] = T.max(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p3[ax0_1, ax1_1, 0, 0, ax4_1], T.float32(0))
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[16, 1, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
2023-02-16 14:18:38 [INFO] [task_scheduler.cc:168] Design space #2:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 1, 14, 14, 256), "float32"], p1: T.Buffer[(16, 1, 1, 1, 256, 64), "float32"], p2: T.Buffer[(1, 16, 14, 14, 64), "float32"], p3: T.Buffer[(1, 16, 1, 1, 64), "float32"], T_relu: T.Buffer[(1, 16, 14, 14, 64), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":64, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 16, 14, 14, 64], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0 in T.grid(1, 8, 1, 1, 16):
                for i0_1, i1_1, i2_1, i3_1, i4_1, i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(1, 1, 7, 2, 1, 64, 1, 1, 1, 1, 1, 7, 4, 4, 1, 1, 1, 2, 2, 1, 1):
                    with T.block("conv2d_NCHWc"):
                        n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                        oc_chunk = T.axis.spatial(16, i1_0 * 2 + i1_1 * 2 + i1_2 * 2 + i1_3)
                        oh = T.axis.spatial(14, i2_0 * 14 + i2_1 * 2 + i2_2 * 2 + i2_3)
                        ow = T.axis.spatial(14, i3_3 + i3_0 * 14 + i3_1 * 7 + i3_2)
                        oc_block = T.axis.spatial(64, i4_0 * 4 + i4_1 * 4 + i4_2 + i4_3)
                        ic = T.axis.reduce(256, i5_0 * 4 + i5_1)
                        kh = T.axis.reduce(1, i6_0 + i6_1)
                        kw = T.axis.reduce(1, i7_1 + i7_0)
                        T.reads(p0[n, ic // 256, oh + kh, ow + kw, ic % 256], p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block])
                        T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                        T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 256, oh + kh, ow + kw, ic % 256] * p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(1, 2, 14, 14, 4):
                    with T.block("T_relu"):
                        ax0_1 = T.axis.spatial(1, ax0)
                        ax1_1 = T.axis.spatial(16, i1_0 * 2 + ax1)
                        ax2_1, ax3_1 = T.axis.remap("SS", [ax2, ax3])
                        ax4_1 = T.axis.spatial(64, i4_0 * 4 + ax4)
                        T.reads(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p3[ax0_1, ax1_1, 0, 0, ax4_1])
                        T.writes(T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] = T.max(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p3[ax0_1, ax1_1, 0, 0, ax4_1], T.float32(0))
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[16, 1, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
2023-02-16 14:20:38 [INFO] [task_scheduler.cc:158] Initializing Task #42: "fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2"
2023-02-16 14:20:38 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 1, 14, 14, 256), "float32"], p1: T.Buffer[(16, 1, 1, 1, 256, 64), "float32"], p2: T.Buffer[(1, 16, 14, 14, 64), "float32"], p3: T.Buffer[(1, 16, 1, 1, 64), "float32"], T_relu: T.Buffer[(1, 16, 14, 14, 64), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        conv2d_NCHWc = T.alloc_buffer([1, 16, 14, 14, 64], dtype="float32")
        T_add = T.alloc_buffer([1, 16, 14, 14, 64], dtype="float32")
        T_add_1 = T.alloc_buffer([1, 16, 14, 14, 64], dtype="float32")
        for i0, i1, i2, i3, i4, i5, i6, i7 in T.grid(1, 16, 14, 14, 64, 256, 1, 1):
            with T.block("conv2d_NCHWc"):
                n, oc_chunk, oh, ow, oc_block, ic, kh, kw = T.axis.remap("SSSSSRRR", [i0, i1, i2, i3, i4, i5, i6, i7])
                T.reads(p0[n, ic // 256, oh + kh, ow + kw, ic % 256], p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block])
                T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                with T.init():
                    conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 256, oh + kh, ow + kw, ic % 256] * p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block]
        for i0, i1, i2, i3, i4 in T.grid(1, 16, 14, 14, 64):
            with T.block("T_add"):
                ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4], p2[ax0, ax1, ax2, ax3, ax4])
                T.writes(T_add[ax0, ax1, ax2, ax3, ax4])
                T_add[ax0, ax1, ax2, ax3, ax4] = conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4] + p2[ax0, ax1, ax2, ax3, ax4]
        for i0, i1, i2, i3, i4 in T.grid(1, 16, 14, 14, 64):
            with T.block("T_add_1"):
                ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(T_add[ax0, ax1, ax2, ax3, ax4], p3[ax0, ax1, 0, 0, ax4])
                T.writes(T_add_1[ax0, ax1, ax2, ax3, ax4])
                T_add_1[ax0, ax1, ax2, ax3, ax4] = T_add[ax0, ax1, ax2, ax3, ax4] + p3[ax0, ax1, 0, 0, ax4]
        for i0, i1, i2, i3, i4 in T.grid(1, 16, 14, 14, 64):
            with T.block("T_relu"):
                ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(T_add_1[ax0, ax1, ax2, ax3, ax4])
                T.writes(T_relu[ax0, ax1, ax2, ax3, ax4])
                T_relu[ax0, ax1, ax2, ax3, ax4] = T.max(T_add_1[ax0, ax1, ax2, ax3, ax4], T.float32(0))
    

2023-02-16 14:20:38 [INFO] [task_scheduler.cc:162] Total 3 design space(s) generated
2023-02-16 14:20:38 [INFO] [task_scheduler.cc:168] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 1, 14, 14, 256), "float32"], p1: T.Buffer[(16, 1, 1, 1, 256, 64), "float32"], p2: T.Buffer[(1, 16, 14, 14, 64), "float32"], p3: T.Buffer[(1, 16, 1, 1, 64), "float32"], T_relu: T.Buffer[(1, 16, 14, 14, 64), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":512, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 16, 14, 14, 64], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0, i0_1, i1_1, i2_1, i3_1, i4_1, i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(1, 2, 7, 7, 2, 1, 2, 2, 2, 2, 4, 1, 1, 1, 2, 1, 1, 16, 64, 1, 1, 1, 2, 1, 1, 1):
                with T.block("conv2d_NCHWc"):
                    n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                    oc_chunk = T.axis.spatial(16, i1_0 * 8 + i1_1 * 4 + i1_2 * 2 + i1_3)
                    oh = T.axis.spatial(14, i2_0 * 2 + i2_1 + i2_2 + i2_3)
                    ow = T.axis.spatial(14, i3_3 + i3_0 * 2 + i3_1 + i3_2)
                    oc_block = T.axis.spatial(64, i4_0 * 32 + i4_1 * 16 + i4_2 + i4_3)
                    ic = T.axis.reduce(256, i5_0 * 64 + i5_1)
                    kh = T.axis.reduce(1, i6_0 + i6_1)
                    kw = T.axis.reduce(1, i7_1 + i7_0)
                    T.reads(p0[n, ic // 256, oh + kh, ow + kw, ic % 256], p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block])
                    T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                    T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                    conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 256, oh + kh, ow + kw, ic % 256] * p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block]
            for i0, i1, i2, i3, i4 in T.grid(1, 16, 14, 14, 64):
                with T.block("T_relu"):
                    ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4], p2[ax0, ax1, ax2, ax3, ax4], p3[ax0, ax1, 0, 0, ax4])
                    T.writes(T_relu[ax0, ax1, ax2, ax3, ax4])
                    T_relu[ax0, ax1, ax2, ax3, ax4] = T.max(conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4] + p2[ax0, ax1, ax2, ax3, ax4] + p3[ax0, ax1, 0, 0, ax4], T.float32(0))
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 2, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2023-02-16 14:20:38 [INFO] [task_scheduler.cc:168] Design space #1:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 1, 14, 14, 256), "float32"], p1: T.Buffer[(16, 1, 1, 1, 256, 64), "float32"], p2: T.Buffer[(1, 16, 14, 14, 64), "float32"], p3: T.Buffer[(1, 16, 1, 1, 64), "float32"], T_relu: T.Buffer[(1, 16, 14, 14, 64), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":64, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 16, 14, 14, 64], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0, i0_1, i1_1, i2_1, i3_1, i4_1 in T.grid(1, 2, 7, 7, 2, 1, 2, 2, 2, 2):
                for i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(4, 1, 1, 1, 2, 1, 1, 16, 64, 1, 1, 1, 2, 1, 1, 1):
                    with T.block("conv2d_NCHWc"):
                        n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                        oc_chunk = T.axis.spatial(16, i1_0 * 8 + i1_1 * 4 + i1_2 * 2 + i1_3)
                        oh = T.axis.spatial(14, i2_0 * 2 + i2_1 + i2_2 + i2_3)
                        ow = T.axis.spatial(14, i3_3 + i3_0 * 2 + i3_1 + i3_2)
                        oc_block = T.axis.spatial(64, i4_0 * 32 + i4_1 * 16 + i4_2 + i4_3)
                        ic = T.axis.reduce(256, i5_0 * 64 + i5_1)
                        kh = T.axis.reduce(1, i6_0 + i6_1)
                        kw = T.axis.reduce(1, i7_1 + i7_0)
                        T.reads(p0[n, ic // 256, oh + kh, ow + kw, ic % 256], p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block])
                        T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                        T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 256, oh + kh, ow + kw, ic % 256] * p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(1, 4, 1, 1, 16):
                    with T.block("T_relu"):
                        ax0_1 = T.axis.spatial(1, ax0)
                        ax1_1 = T.axis.spatial(16, i1_0 * 8 + i1_1 * 4 + ax1)
                        ax2_1 = T.axis.spatial(14, i2_0 * 2 + i2_1 + ax2)
                        ax3_1 = T.axis.spatial(14, i3_0 * 2 + i3_1 + ax3)
                        ax4_1 = T.axis.spatial(64, i4_0 * 32 + i4_1 * 16 + ax4)
                        T.reads(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p3[ax0_1, ax1_1, 0, 0, ax4_1])
                        T.writes(T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] = T.max(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p3[ax0_1, ax1_1, 0, 0, ax4_1], T.float32(0))
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 2, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
2023-02-16 14:20:38 [INFO] [task_scheduler.cc:168] Design space #2:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 1, 14, 14, 256), "float32"], p1: T.Buffer[(16, 1, 1, 1, 256, 64), "float32"], p2: T.Buffer[(1, 16, 14, 14, 64), "float32"], p3: T.Buffer[(1, 16, 1, 1, 64), "float32"], T_relu: T.Buffer[(1, 16, 14, 14, 64), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":512, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 16, 14, 14, 64], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0 in T.grid(1, 2, 7, 7, 2):
                for i0_1, i1_1, i2_1, i3_1, i4_1, i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(1, 2, 2, 2, 2, 4, 1, 1, 1, 2, 1, 1, 16, 64, 1, 1, 1, 2, 1, 1, 1):
                    with T.block("conv2d_NCHWc"):
                        n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                        oc_chunk = T.axis.spatial(16, i1_0 * 8 + i1_1 * 4 + i1_2 * 2 + i1_3)
                        oh = T.axis.spatial(14, i2_0 * 2 + i2_1 + i2_2 + i2_3)
                        ow = T.axis.spatial(14, i3_3 + i3_0 * 2 + i3_1 + i3_2)
                        oc_block = T.axis.spatial(64, i4_0 * 32 + i4_1 * 16 + i4_2 + i4_3)
                        ic = T.axis.reduce(256, i5_0 * 64 + i5_1)
                        kh = T.axis.reduce(1, i6_0 + i6_1)
                        kw = T.axis.reduce(1, i7_1 + i7_0)
                        T.reads(p0[n, ic // 256, oh + kh, ow + kw, ic % 256], p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block])
                        T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                        T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 256, oh + kh, ow + kw, ic % 256] * p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(1, 8, 2, 2, 32):
                    with T.block("T_relu"):
                        ax0_1 = T.axis.spatial(1, ax0)
                        ax1_1 = T.axis.spatial(16, i1_0 * 8 + ax1)
                        ax2_1 = T.axis.spatial(14, i2_0 * 2 + ax2)
                        ax3_1 = T.axis.spatial(14, i3_0 * 2 + ax3)
                        ax4_1 = T.axis.spatial(64, i4_0 * 32 + ax4)
                        T.reads(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p3[ax0_1, ax1_1, 0, 0, ax4_1])
                        T.writes(T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] = T.max(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p3[ax0_1, ax1_1, 0, 0, ax4_1], T.float32(0))
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 2, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
2023-02-16 15:15:09 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-02-16 15:15:09 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2023-02-16 15:15:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2eeca5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1f748ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x21b72ef8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1f965d08)]: 0 failure(s)
2023-02-16 15:15:10 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2023-02-16 15:15:11 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2eeca5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1f748ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x21b72ef8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1f965d08)]: 0 failure(s)
2023-02-16 15:15:12 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2eeca5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1f748ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x21b72ef8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1f965d08)]: 0 failure(s)
2023-02-16 15:15:13 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2eeca5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1f748ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x21b72ef8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1f965d08)]: 0 failure(s)
2023-02-16 15:15:14 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2eeca5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1f748ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x21b72ef8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1f965d08)]: 0 failure(s)
2023-02-16 15:15:14 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0000  0.9997  0.9996  0.9988  0.9986  0.9985  0.9983  0.9982  0.9981  0.9979  0.9977  0.9974  0.9974  0.9972  0.9970  0.9968
[17 : 32]:	0.9967  0.9967  0.9966  0.9962  0.9946  0.9945  0.9936  0.9934  0.9921  0.9913  0.9912  0.9907  0.9906  0.9898  0.9891  0.9880
[33 : 48]:	0.9879  0.9878  0.9878  0.9876  0.9874  0.9861  0.9856  0.9856  0.9850  0.9850  0.9850  0.9848  0.9840  0.9839  0.9834  0.9828
[49 : 64]:	0.9827  0.9820  0.9816  0.9812  0.9811  0.9808  0.9790  0.9789  0.9788  0.9787  0.9780  0.9777  0.9769  0.9756  0.9752  0.9746
2023-02-16 15:15:14 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-02-16 15:15:14 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #1: GFLOPs: 9.9561. Time: 10381.8003 us. Best GFLOPs: 9.9561
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #2: GFLOPs: 33.8761. Time: 3051.1913 us. Best GFLOPs: 33.8761
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #3: GFLOPs: 51.8897. Time: 1991.9679 us. Best GFLOPs: 51.8897
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #4: GFLOPs: 131.3677. Time: 786.8188 us. Best GFLOPs: 131.3677
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #5: GFLOPs: 34.9946. Time: 2953.6697 us. Best GFLOPs: 131.3677
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #6: GFLOPs: 79.9960. Time: 1292.0971 us. Best GFLOPs: 131.3677
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #7: GFLOPs: 21.4775. Time: 4812.5978 us. Best GFLOPs: 131.3677
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #8: GFLOPs: 99.1626. Time: 1042.3538 us. Best GFLOPs: 131.3677
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #9: GFLOPs: 52.1648. Time: 1981.4626 us. Best GFLOPs: 131.3677
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #10: GFLOPs: 18.6523. Time: 5541.5416 us. Best GFLOPs: 131.3677
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #11: GFLOPs: 14.0601. Time: 7351.4841 us. Best GFLOPs: 131.3677
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #12: GFLOPs: 160.9406. Time: 642.2403 us. Best GFLOPs: 160.9406
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #13: GFLOPs: 12.5769. Time: 8218.4184 us. Best GFLOPs: 160.9406
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #14: GFLOPs: 127.2578. Time: 812.2299 us. Best GFLOPs: 160.9406
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #15: GFLOPs: 114.6687. Time: 901.4016 us. Best GFLOPs: 160.9406
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #16: GFLOPs: 9.6077. Time: 10758.2576 us. Best GFLOPs: 160.9406
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #17: GFLOPs: 14.3865. Time: 7184.6769 us. Best GFLOPs: 160.9406
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #18: GFLOPs: 16.3551. Time: 6319.8879 us. Best GFLOPs: 160.9406
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #19: GFLOPs: 163.2191. Time: 633.2748 us. Best GFLOPs: 163.2191
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #20: GFLOPs: 84.7429. Time: 1219.7197 us. Best GFLOPs: 163.2191
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #21: GFLOPs: 11.8456. Time: 8725.8056 us. Best GFLOPs: 163.2191
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #22: GFLOPs: 36.2028. Time: 2855.1013 us. Best GFLOPs: 163.2191
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #23: GFLOPs: 112.7114. Time: 917.0552 us. Best GFLOPs: 163.2191
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #24: GFLOPs: 74.4308. Time: 1388.7077 us. Best GFLOPs: 163.2191
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #25: GFLOPs: 171.3997. Time: 603.0498 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #26: GFLOPs: 15.0330. Time: 6875.7034 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #27: GFLOPs: 85.5804. Time: 1207.7832 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #28: GFLOPs: 12.9872. Time: 7958.7933 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #29: GFLOPs: 18.7609. Time: 5509.4685 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #30: GFLOPs: 39.3730. Time: 2625.2164 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #31: GFLOPs: 17.4680. Time: 5917.2358 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #32: GFLOPs: 44.4235. Time: 2326.7524 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #33: GFLOPs: 38.6443. Time: 2674.7161 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #34: GFLOPs: 26.5575. Time: 3892.0335 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #35: GFLOPs: 63.6978. Time: 1622.7024 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #36: GFLOPs: 75.7720. Time: 1364.1259 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #37: GFLOPs: 39.3127. Time: 2629.2414 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #38: GFLOPs: 164.3168. Time: 629.0445 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #39: GFLOPs: 9.0967. Time: 11362.6393 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #40: GFLOPs: 6.5201. Time: 15852.8509 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #41: GFLOPs: 38.1499. Time: 2709.3774 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #42: GFLOPs: 158.9828. Time: 650.1493 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #43: GFLOPs: 100.0087. Time: 1033.5355 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #44: GFLOPs: 69.6489. Time: 1484.0513 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #45: GFLOPs: 56.1563. Time: 1840.6236 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #46: GFLOPs: 20.7084. Time: 4991.3246 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #47: GFLOPs: 12.7015. Time: 8137.8392 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #48: GFLOPs: 37.5862. Time: 2750.0120 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #49: GFLOPs: 43.9268. Time: 2353.0625 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #50: GFLOPs: 26.5461. Time: 3893.6961 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #51: GFLOPs: 53.1668. Time: 1944.1198 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #52: GFLOPs: 44.2143. Time: 2337.7645 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #53: GFLOPs: 49.6799. Time: 2080.5716 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #54: GFLOPs: 6.7184. Time: 15384.8898 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #55: GFLOPs: 61.8806. Time: 1670.3548 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #56: GFLOPs: 15.5177. Time: 6660.9280 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #57: GFLOPs: 27.7600. Time: 3723.4359 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #58: GFLOPs: 136.2278. Time: 758.7479 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #59: GFLOPs: 51.9145. Time: 1991.0139 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #60: GFLOPs: 13.4238. Time: 7699.9381 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #61: GFLOPs: 35.1537. Time: 2940.3064 us. Best GFLOPs: 171.3997
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #62: GFLOPs: 221.6753. Time: 466.2790 us. Best GFLOPs: 221.6753
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #63: GFLOPs: 15.0938. Time: 6848.0364 us. Best GFLOPs: 221.6753
2023-02-16 15:36:37 [INFO] [task_scheduler.cc:129] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #64: GFLOPs: 127.2777. Time: 812.1024 us. Best GFLOPs: 221.6753
