2023-02-16 14:18:37 [INFO] [task_scheduler.cc:158] Initializing Task #36: "fused_nn_contrib_conv2d_NCHWc_add_2"
2023-02-16 14:18:37 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 1, 14, 14, 256), "float32"], p1: T.Buffer[(16, 1, 1, 1, 256, 64), "float32"], p2: T.Buffer[(1, 16, 14, 14, 64), "float32"], T_add: T.Buffer[(1, 16, 14, 14, 64), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        conv2d_NCHWc = T.alloc_buffer([1, 16, 14, 14, 64], dtype="float32")
        for i0, i1, i2, i3, i4, i5, i6, i7 in T.grid(1, 16, 14, 14, 64, 256, 1, 1):
            with T.block("conv2d_NCHWc"):
                n, oc_chunk, oh, ow, oc_block, ic, kh, kw = T.axis.remap("SSSSSRRR", [i0, i1, i2, i3, i4, i5, i6, i7])
                T.reads(p0[n, ic // 256, oh + kh, ow + kw, ic % 256], p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block])
                T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                with T.init():
                    conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 256, oh + kh, ow + kw, ic % 256] * p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block]
        for i0, i1, i2, i3, i4 in T.grid(1, 16, 14, 14, 64):
            with T.block("T_add"):
                ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4], p2[ax0, ax1, ax2, ax3, ax4])
                T.writes(T_add[ax0, ax1, ax2, ax3, ax4])
                T_add[ax0, ax1, ax2, ax3, ax4] = conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4] + p2[ax0, ax1, ax2, ax3, ax4]
    

2023-02-16 14:18:37 [INFO] [task_scheduler.cc:162] Total 3 design space(s) generated
2023-02-16 14:18:37 [INFO] [task_scheduler.cc:168] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 1, 14, 14, 256), "float32"], p1: T.Buffer[(16, 1, 1, 1, 256, 64), "float32"], p2: T.Buffer[(1, 16, 14, 14, 64), "float32"], T_add: T.Buffer[(1, 16, 14, 14, 64), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":0, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 16, 14, 14, 64], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0, i0_1, i1_1, i2_1, i3_1, i4_1, i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(1, 1, 1, 2, 16, 1, 4, 7, 1, 2, 64, 1, 1, 1, 4, 1, 1, 1, 4, 1, 1, 1, 1, 2, 7, 2):
                with T.block("conv2d_NCHWc"):
                    n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                    oc_chunk = T.axis.spatial(16, i1_3 + i1_0 * 16 + i1_1 * 4 + i1_2)
                    oh = T.axis.spatial(14, i2_0 * 14 + i2_1 * 2 + i2_2 * 2 + i2_3)
                    ow = T.axis.spatial(14, i3_0 * 7 + i3_1 * 7 + i3_2 * 7 + i3_3)
                    oc_block = T.axis.spatial(64, i4_0 * 4 + i4_1 * 2 + i4_2 * 2 + i4_3)
                    ic = T.axis.reduce(256, i5_0 * 4 + i5_1)
                    kh = T.axis.reduce(1, i6_0 + i6_1)
                    kw = T.axis.reduce(1, i7_1 + i7_0)
                    T.reads(p0[n, ic // 256, oh + kh, ow + kw, ic % 256], p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block])
                    T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                    T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                    conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 256, oh + kh, ow + kw, ic % 256] * p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block]
            for i0, i1, i2, i3, i4 in T.grid(1, 16, 14, 14, 64):
                with T.block("T_add"):
                    ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4], p2[ax0, ax1, ax2, ax3, ax4])
                    T.writes(T_add[ax0, ax1, ax2, ax3, ax4])
                    T_add[ax0, ax1, ax2, ax3, ax4] = conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4] + p2[ax0, ax1, ax2, ax3, ax4]
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 4, 4, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[16, 2, 1, 2])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[64, 4])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v62 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v62)
2023-02-16 14:18:37 [INFO] [task_scheduler.cc:168] Design space #1:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 1, 14, 14, 256), "float32"], p1: T.Buffer[(16, 1, 1, 1, 256, 64), "float32"], p2: T.Buffer[(1, 16, 14, 14, 64), "float32"], T_add: T.Buffer[(1, 16, 14, 14, 64), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":512, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 16, 14, 14, 64], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0, i0_1, i1_1, i2_1, i3_1, i4_1 in T.grid(1, 1, 1, 2, 16, 1, 4, 7, 1, 2):
                for i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(64, 1, 1, 1, 4, 1, 1, 1, 4, 1, 1, 1, 1, 2, 7, 2):
                    with T.block("conv2d_NCHWc"):
                        n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                        oc_chunk = T.axis.spatial(16, i1_3 + i1_0 * 16 + i1_1 * 4 + i1_2)
                        oh = T.axis.spatial(14, i2_0 * 14 + i2_1 * 2 + i2_2 * 2 + i2_3)
                        ow = T.axis.spatial(14, i3_0 * 7 + i3_1 * 7 + i3_2 * 7 + i3_3)
                        oc_block = T.axis.spatial(64, i4_0 * 4 + i4_1 * 2 + i4_2 * 2 + i4_3)
                        ic = T.axis.reduce(256, i5_0 * 4 + i5_1)
                        kh = T.axis.reduce(1, i6_0 + i6_1)
                        kw = T.axis.reduce(1, i7_1 + i7_0)
                        T.reads(p0[n, ic // 256, oh + kh, ow + kw, ic % 256], p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block])
                        T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                        T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 256, oh + kh, ow + kw, ic % 256] * p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(1, 4, 2, 7, 2):
                    with T.block("T_add"):
                        ax0_1 = T.axis.spatial(1, ax0)
                        ax1_1 = T.axis.spatial(16, i1_1 * 4 + ax1)
                        ax2_1 = T.axis.spatial(14, i2_1 * 2 + ax2)
                        ax3_1 = T.axis.spatial(14, i3_0 * 7 + ax3)
                        ax4_1 = T.axis.spatial(64, i4_0 * 4 + i4_1 * 2 + ax4)
                        T.reads(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T.writes(T_add[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T_add[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] = conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1]
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 4, 4, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[16, 2, 1, 2])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[64, 4])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2023-02-16 14:18:37 [INFO] [task_scheduler.cc:168] Design space #2:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 1, 14, 14, 256), "float32"], p1: T.Buffer[(16, 1, 1, 1, 256, 64), "float32"], p2: T.Buffer[(1, 16, 14, 14, 64), "float32"], T_add: T.Buffer[(1, 16, 14, 14, 64), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":512, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 16, 14, 14, 64], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0 in T.grid(1, 1, 1, 2, 16):
                for i0_1, i1_1, i2_1, i3_1, i4_1, i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(1, 4, 7, 1, 2, 64, 1, 1, 1, 4, 1, 1, 1, 4, 1, 1, 1, 1, 2, 7, 2):
                    with T.block("conv2d_NCHWc"):
                        n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                        oc_chunk = T.axis.spatial(16, i1_3 + i1_0 * 16 + i1_1 * 4 + i1_2)
                        oh = T.axis.spatial(14, i2_0 * 14 + i2_1 * 2 + i2_2 * 2 + i2_3)
                        ow = T.axis.spatial(14, i3_0 * 7 + i3_1 * 7 + i3_2 * 7 + i3_3)
                        oc_block = T.axis.spatial(64, i4_0 * 4 + i4_1 * 2 + i4_2 * 2 + i4_3)
                        ic = T.axis.reduce(256, i5_0 * 4 + i5_1)
                        kh = T.axis.reduce(1, i6_0 + i6_1)
                        kw = T.axis.reduce(1, i7_1 + i7_0)
                        T.reads(p0[n, ic // 256, oh + kh, ow + kw, ic % 256], p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block])
                        T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                        T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 256, oh + kh, ow + kw, ic % 256] * p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(1, 16, 14, 7, 4):
                    with T.block("T_add"):
                        ax0_1, ax1_1, ax2_1 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        ax3_1 = T.axis.spatial(14, i3_0 * 7 + ax3)
                        ax4_1 = T.axis.spatial(64, i4_0 * 4 + ax4)
                        T.reads(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T.writes(T_add[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T_add[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] = conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1]
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 4, 4, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[16, 2, 1, 2])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[64, 4])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2023-02-16 14:20:38 [INFO] [task_scheduler.cc:158] Initializing Task #36: "fused_nn_contrib_conv2d_NCHWc_add_2"
2023-02-16 14:20:38 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 1, 14, 14, 256), "float32"], p1: T.Buffer[(16, 1, 1, 1, 256, 64), "float32"], p2: T.Buffer[(1, 16, 14, 14, 64), "float32"], T_add: T.Buffer[(1, 16, 14, 14, 64), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        conv2d_NCHWc = T.alloc_buffer([1, 16, 14, 14, 64], dtype="float32")
        for i0, i1, i2, i3, i4, i5, i6, i7 in T.grid(1, 16, 14, 14, 64, 256, 1, 1):
            with T.block("conv2d_NCHWc"):
                n, oc_chunk, oh, ow, oc_block, ic, kh, kw = T.axis.remap("SSSSSRRR", [i0, i1, i2, i3, i4, i5, i6, i7])
                T.reads(p0[n, ic // 256, oh + kh, ow + kw, ic % 256], p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block])
                T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                with T.init():
                    conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 256, oh + kh, ow + kw, ic % 256] * p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block]
        for i0, i1, i2, i3, i4 in T.grid(1, 16, 14, 14, 64):
            with T.block("T_add"):
                ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4], p2[ax0, ax1, ax2, ax3, ax4])
                T.writes(T_add[ax0, ax1, ax2, ax3, ax4])
                T_add[ax0, ax1, ax2, ax3, ax4] = conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4] + p2[ax0, ax1, ax2, ax3, ax4]
    

2023-02-16 14:20:38 [INFO] [task_scheduler.cc:162] Total 3 design space(s) generated
2023-02-16 14:20:38 [INFO] [task_scheduler.cc:168] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 1, 14, 14, 256), "float32"], p1: T.Buffer[(16, 1, 1, 1, 256, 64), "float32"], p2: T.Buffer[(1, 16, 14, 14, 64), "float32"], T_add: T.Buffer[(1, 16, 14, 14, 64), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":64, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 16, 14, 14, 64], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0, i0_1, i1_1, i2_1, i3_1, i4_1, i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(1, 1, 2, 1, 1, 1, 1, 1, 2, 8, 16, 1, 1, 1, 4, 1, 7, 4, 16, 1, 1, 1, 4, 7, 1, 2):
                with T.block("conv2d_NCHWc"):
                    n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                    oc_chunk = T.axis.spatial(16, i1_0 * 16 + i1_1 * 16 + i1_2 * 4 + i1_3)
                    oh = T.axis.spatial(14, i2_0 * 7 + i2_1 * 7 + i2_2 * 7 + i2_3)
                    ow = T.axis.spatial(14, i3_3 + i3_0 * 14 + i3_1 * 7 + i3_2)
                    oc_block = T.axis.spatial(64, i4_0 * 64 + i4_1 * 8 + i4_2 * 2 + i4_3)
                    ic = T.axis.reduce(256, i5_0 * 16 + i5_1)
                    kh = T.axis.reduce(1, i6_0 + i6_1)
                    kw = T.axis.reduce(1, i7_1 + i7_0)
                    T.reads(p0[n, ic // 256, oh + kh, ow + kw, ic % 256], p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block])
                    T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                    T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                    conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 256, oh + kh, ow + kw, ic % 256] * p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block]
            for i0, i1, i2, i3, i4 in T.grid(1, 16, 14, 14, 64):
                with T.block("T_add"):
                    ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4], p2[ax0, ax1, ax2, ax3, ax4])
                    T.writes(T_add[ax0, ax1, ax2, ax3, ax4])
                    T_add[ax0, ax1, ax2, ax3, ax4] = conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4] + p2[ax0, ax1, ax2, ax3, ax4]
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 4, 4])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 8, 4, 2])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[16, 16])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v62 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v62)
2023-02-16 14:20:38 [INFO] [task_scheduler.cc:168] Design space #1:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 1, 14, 14, 256), "float32"], p1: T.Buffer[(16, 1, 1, 1, 256, 64), "float32"], p2: T.Buffer[(1, 16, 14, 14, 64), "float32"], T_add: T.Buffer[(1, 16, 14, 14, 64), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":16, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 16, 14, 14, 64], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0, i0_1, i1_1, i2_1, i3_1, i4_1 in T.grid(1, 1, 2, 1, 1, 1, 1, 1, 2, 8):
                for i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(16, 1, 1, 1, 4, 1, 7, 4, 16, 1, 1, 1, 4, 7, 1, 2):
                    with T.block("conv2d_NCHWc"):
                        n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                        oc_chunk = T.axis.spatial(16, i1_0 * 16 + i1_1 * 16 + i1_2 * 4 + i1_3)
                        oh = T.axis.spatial(14, i2_0 * 7 + i2_1 * 7 + i2_2 * 7 + i2_3)
                        ow = T.axis.spatial(14, i3_3 + i3_0 * 14 + i3_1 * 7 + i3_2)
                        oc_block = T.axis.spatial(64, i4_0 * 64 + i4_1 * 8 + i4_2 * 2 + i4_3)
                        ic = T.axis.reduce(256, i5_0 * 16 + i5_1)
                        kh = T.axis.reduce(1, i6_0 + i6_1)
                        kw = T.axis.reduce(1, i7_1 + i7_0)
                        T.reads(p0[n, ic // 256, oh + kh, ow + kw, ic % 256], p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block])
                        T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                        T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 256, oh + kh, ow + kw, ic % 256] * p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(1, 16, 7, 7, 8):
                    with T.block("T_add"):
                        ax0_1, ax1_1 = T.axis.remap("SS", [ax0, ax1])
                        ax2_1 = T.axis.spatial(14, i2_0 * 7 + ax2)
                        ax3_1 = T.axis.spatial(14, i3_1 * 7 + ax3)
                        ax4_1 = T.axis.spatial(64, i4_1 * 8 + ax4)
                        T.reads(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T.writes(T_add[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T_add[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] = conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1]
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 4, 4])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 8, 4, 2])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[16, 16])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2023-02-16 14:20:38 [INFO] [task_scheduler.cc:168] Design space #2:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 1, 14, 14, 256), "float32"], p1: T.Buffer[(16, 1, 1, 1, 256, 64), "float32"], p2: T.Buffer[(1, 16, 14, 14, 64), "float32"], T_add: T.Buffer[(1, 16, 14, 14, 64), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":64, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 16, 14, 14, 64], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0 in T.grid(1, 1, 2, 1, 1):
                for i0_1, i1_1, i2_1, i3_1, i4_1, i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(1, 1, 1, 2, 8, 16, 1, 1, 1, 4, 1, 7, 4, 16, 1, 1, 1, 4, 7, 1, 2):
                    with T.block("conv2d_NCHWc"):
                        n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                        oc_chunk = T.axis.spatial(16, i1_0 * 16 + i1_1 * 16 + i1_2 * 4 + i1_3)
                        oh = T.axis.spatial(14, i2_0 * 7 + i2_1 * 7 + i2_2 * 7 + i2_3)
                        ow = T.axis.spatial(14, i3_3 + i3_0 * 14 + i3_1 * 7 + i3_2)
                        oc_block = T.axis.spatial(64, i4_0 * 64 + i4_1 * 8 + i4_2 * 2 + i4_3)
                        ic = T.axis.reduce(256, i5_0 * 16 + i5_1)
                        kh = T.axis.reduce(1, i6_0 + i6_1)
                        kw = T.axis.reduce(1, i7_1 + i7_0)
                        T.reads(p0[n, ic // 256, oh + kh, ow + kw, ic % 256], p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block])
                        T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                        T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 256, oh + kh, ow + kw, ic % 256] * p1[oc_chunk, ic // 256, kh, kw, ic % 256, oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(1, 16, 7, 14, 64):
                    with T.block("T_add"):
                        ax0_1, ax1_1 = T.axis.remap("SS", [ax0, ax1])
                        ax2_1 = T.axis.spatial(14, i2_0 * 7 + ax2)
                        ax3_1, ax4_1 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T.writes(T_add[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T_add[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] = conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1]
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 4, 4])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 8, 4, 2])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[16, 16])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2023-02-16 15:07:51 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-02-16 15:07:51 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2023-02-16 15:07:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4224de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f538228)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xbe86f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x2770bfa8)]: 0 failure(s)
2023-02-16 15:07:51 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2023-02-16 15:07:52 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4224de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f538228)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xbe86f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x2770bfa8)]: 0 failure(s)
2023-02-16 15:07:53 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4224de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f538228)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xbe86f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x2770bfa8)]: 0 failure(s)
2023-02-16 15:07:54 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4224de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f538228)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xbe86f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x2770bfa8)]: 0 failure(s)
2023-02-16 15:07:55 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4224de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f538228)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xbe86f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x2770bfa8)]: 0 failure(s)
2023-02-16 15:07:55 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9985  0.9968  0.9966  0.9962  0.9956  0.9943  0.9941  0.9940  0.9915  0.9893  0.9892  0.9885  0.9884  0.9881  0.9879
[17 : 32]:	0.9879  0.9874  0.9871  0.9868  0.9865  0.9857  0.9854  0.9854  0.9853  0.9846  0.9846  0.9841  0.9838  0.9817  0.9815  0.9810
[33 : 48]:	0.9809  0.9805  0.9802  0.9800  0.9798  0.9792  0.9792  0.9790  0.9779  0.9776  0.9776  0.9774  0.9771  0.9771  0.9771  0.9770
[49 : 64]:	0.9763  0.9763  0.9755  0.9753  0.9746  0.9743  0.9740  0.9739  0.9733  0.9722  0.9714  0.9707  0.9696  0.9679  0.9678  0.9673
2023-02-16 15:07:55 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-02-16 15:07:55 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #1: GFLOPs: 95.3352. Time: 1079.9905 us. Best GFLOPs: 95.3352
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #2: GFLOPs: 12.3244. Time: 8354.2497 us. Best GFLOPs: 95.3352
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #3: GFLOPs: 125.1348. Time: 822.8017 us. Best GFLOPs: 125.1348
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #4: GFLOPs: 142.7266. Time: 721.3871 us. Best GFLOPs: 142.7266
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #5: GFLOPs: 23.5176. Time: 4378.0468 us. Best GFLOPs: 142.7266
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #6: GFLOPs: 53.9438. Time: 1908.6728 us. Best GFLOPs: 142.7266
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #7: GFLOPs: 8.2679. Time: 12453.0919 us. Best GFLOPs: 142.7266
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #8: GFLOPs: 10.5885. Time: 9723.9062 us. Best GFLOPs: 142.7266
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #9: GFLOPs: 85.9693. Time: 1197.6496 us. Best GFLOPs: 142.7266
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #10: GFLOPs: 28.3336. Time: 3633.8888 us. Best GFLOPs: 142.7266
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #11: GFLOPs: 6.1855. Time: 16645.4341 us. Best GFLOPs: 142.7266
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #12: GFLOPs: 26.9383. Time: 3822.1094 us. Best GFLOPs: 142.7266
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #13: GFLOPs: 18.6360. Time: 5524.8490 us. Best GFLOPs: 142.7266
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #14: GFLOPs: 303.6487. Time: 339.0799 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #15: GFLOPs: 87.3164. Time: 1179.1733 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #16: GFLOPs: 28.6032. Time: 3599.6367 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #17: GFLOPs: 65.6663. Time: 1567.9449 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #18: GFLOPs: 93.5694. Time: 1100.3718 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #19: GFLOPs: 118.6467. Time: 867.7965 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #20: GFLOPs: 112.6650. Time: 913.8701 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #21: GFLOPs: 9.1638. Time: 11235.6273 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #22: GFLOPs: 45.0928. Time: 2283.3154 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #23: GFLOPs: 293.6082. Time: 350.6754 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #24: GFLOPs: 94.2341. Time: 1092.6100 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #25: GFLOPs: 26.9408. Time: 3821.7594 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #26: GFLOPs: 21.0536. Time: 4890.4249 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #27: GFLOPs: 79.6106. Time: 1293.3096 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #28: GFLOPs: 53.4601. Time: 1925.9431 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #29: GFLOPs: 39.1016. Time: 2633.1699 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #30: GFLOPs: 16.4079. Time: 6275.0944 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #31: GFLOPs: 32.6782. Time: 3150.7583 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #32: GFLOPs: 31.3719. Time: 3281.9546 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #33: GFLOPs: 92.8535. Time: 1108.8554 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #34: GFLOPs: 30.8336. Time: 3339.2535 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #35: GFLOPs: 66.2659. Time: 1553.7578 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #36: GFLOPs: 49.3816. Time: 2085.0085 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #37: GFLOPs: 96.5492. Time: 1066.4113 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #38: GFLOPs: 32.2628. Time: 3191.3248 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #39: GFLOPs: 32.1855. Time: 3198.9898 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #40: GFLOPs: 49.6354. Time: 2074.3499 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #41: GFLOPs: 67.0763. Time: 1534.9851 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #42: GFLOPs: 101.3930. Time: 1015.4662 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #43: GFLOPs: 4.0775. Time: 25251.2471 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #44: GFLOPs: 23.5649. Time: 4369.2514 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #45: GFLOPs: 45.7803. Time: 2249.0280 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #46: GFLOPs: 19.1061. Time: 5388.9234 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #47: GFLOPs: 177.6370. Time: 579.6155 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #48: GFLOPs: 156.1307. Time: 659.4549 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #49: GFLOPs: 27.3758. Time: 3761.0224 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #50: GFLOPs: 6.1854. Time: 16645.8248 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #51: GFLOPs: 9.2832. Time: 11091.1630 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #52: GFLOPs: 38.5566. Time: 2670.3892 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #53: GFLOPs: 37.8949. Time: 2717.0216 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #54: GFLOPs: 96.5370. Time: 1066.5459 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #55: GFLOPs: 72.0853. Time: 1428.3239 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #56: GFLOPs: 6.3227. Time: 16284.4334 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #57: GFLOPs: 37.1984. Time: 2767.8893 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #58: GFLOPs: 21.8359. Time: 4715.2282 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #59: GFLOPs: 295.7060. Time: 348.1876 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #60: GFLOPs: 38.3896. Time: 2682.0069 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #61: GFLOPs: 12.1922. Time: 8444.8305 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #62: GFLOPs: 35.4444. Time: 2904.8623 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #63: GFLOPs: 35.0276. Time: 2939.4314 us. Best GFLOPs: 303.6487
2023-02-16 15:36:33 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #64: GFLOPs: 8.4745. Time: 12149.5326 us. Best GFLOPs: 303.6487
2023-02-16 15:59:15 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-02-16 15:59:15 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2023-02-16 15:59:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4224de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f538228)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xbe86f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x2770bfa8)]: 0 failure(s)
2023-02-16 15:59:16 [INFO] [evolutionary_search.cc:723] Sampled 448 candidate(s)
2023-02-16 15:59:18 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4224de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f538228)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xbe86f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x2770bfa8)]: 0 failure(s)
2023-02-16 15:59:20 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4224de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f538228)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xbe86f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x2770bfa8)]: 0 failure(s)
2023-02-16 15:59:22 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4224de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f538228)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xbe86f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x2770bfa8)]: 0 failure(s)
2023-02-16 15:59:24 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4224de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f538228)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xbe86f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x2770bfa8)]: 0 failure(s)
2023-02-16 15:59:25 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0022  1.0022  1.0022  1.0022  1.0022  1.0022  0.9991  0.9783  0.9783  0.9783  0.9783  0.9783  0.9728  0.9728  0.9701  0.9675
[17 : 32]:	0.9675  0.9675  0.9675  0.9605  0.9605  0.9596  0.9503  0.9470  0.9455  0.9455  0.9455  0.9444  0.9444  0.9444  0.9444  0.9370
[33 : 48]:	0.9362  0.9362  0.9350  0.9333  0.9333  0.9297  0.9240  0.9240  0.9240  0.9192  0.9186  0.9156  0.9103  0.9103  0.9103  0.9103
[49 : 64]:	0.9082  0.9080  0.9017  0.9017  0.8950  0.8927  0.8923  0.8922  0.8922  0.8826  0.8826  0.8803  0.8693  0.8669  0.8657  0.8522
2023-02-16 15:59:25 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-02-16 15:59:25 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #65: GFLOPs: 211.8903. Time: 485.9172 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #66: GFLOPs: 245.8934. Time: 418.7227 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #67: GFLOPs: 260.3294. Time: 395.5033 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #68: GFLOPs: 246.4137. Time: 417.8386 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #69: GFLOPs: 208.1910. Time: 494.5514 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #70: GFLOPs: 286.0572. Time: 359.9320 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #71: GFLOPs: 208.5394. Time: 493.7252 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #72: GFLOPs: 198.0083. Time: 519.9841 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #73: GFLOPs: 286.3927. Time: 359.5104 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #74: GFLOPs: 214.6309. Time: 479.7126 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #75: GFLOPs: 242.8758. Time: 423.9252 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #76: GFLOPs: 292.8922. Time: 351.5325 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #77: GFLOPs: 207.0219. Time: 497.3443 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #78: GFLOPs: 209.8813. Time: 490.5686 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #79: GFLOPs: 206.1897. Time: 499.3515 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #80: GFLOPs: 237.9166. Time: 432.7614 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #81: GFLOPs: 253.3309. Time: 406.4295 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #82: GFLOPs: 236.4139. Time: 435.5122 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #83: GFLOPs: 177.4794. Time: 580.1300 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #84: GFLOPs: 295.3447. Time: 348.6135 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #85: GFLOPs: 291.8103. Time: 352.8360 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #86: GFLOPs: 288.3528. Time: 357.0666 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #87: GFLOPs: 236.8284. Time: 434.7500 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #88: GFLOPs: 223.7150. Time: 460.2335 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #89: GFLOPs: 221.3561. Time: 465.1380 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #90: GFLOPs: 276.3675. Time: 372.5516 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #91: GFLOPs: 208.5502. Time: 493.6997 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #92: GFLOPs: 147.9299. Time: 696.0132 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #93: GFLOPs: 120.4511. Time: 854.7963 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #94: GFLOPs: 186.0279. Time: 553.4714 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #95: GFLOPs: 216.3254. Time: 475.9549 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #96: GFLOPs: 218.6705. Time: 470.8507 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #97: GFLOPs: 276.9651. Time: 371.7478 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #98: GFLOPs: 278.9512. Time: 369.1009 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #99: GFLOPs: 283.2561. Time: 363.4914 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #100: GFLOPs: 176.2873. Time: 584.0532 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #101: GFLOPs: 183.8836. Time: 559.9257 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #102: GFLOPs: 174.6586. Time: 589.4993 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #103: GFLOPs: 286.1450. Time: 359.8217 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #104: GFLOPs: 278.7304. Time: 369.3933 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #105: GFLOPs: 285.8452. Time: 360.1990 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #106: GFLOPs: 185.6388. Time: 554.6316 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #107: GFLOPs: 291.8224. Time: 352.8213 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #108: GFLOPs: 224.0342. Time: 459.5779 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #109: GFLOPs: 209.8856. Time: 490.5584 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #110: GFLOPs: 210.0512. Time: 490.1717 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #111: GFLOPs: 197.3984. Time: 521.5907 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #112: GFLOPs: 214.6506. Time: 479.6687 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #113: GFLOPs: 294.3016. Time: 349.8491 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #114: GFLOPs: 218.7067. Time: 470.7726 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #115: GFLOPs: 242.4894. Time: 424.6007 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #116: GFLOPs: 244.4164. Time: 421.2531 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #117: GFLOPs: 210.8426. Time: 488.3318 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #118: GFLOPs: 201.1019. Time: 511.9849 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #119: GFLOPs: 237.8016. Time: 432.9707 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #120: GFLOPs: 202.0484. Time: 509.5867 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #121: GFLOPs: 213.4824. Time: 482.2933 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #122: GFLOPs: 178.2539. Time: 577.6095 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #123: GFLOPs: 120.7388. Time: 852.7594 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #124: GFLOPs: 163.4458. Time: 629.9406 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #125: GFLOPs: 142.1592. Time: 724.2665 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #126: GFLOPs: 12.2804. Time: 8384.1849 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #127: GFLOPs: 20.5027. Time: 5021.8332 us. Best GFLOPs: 303.6487
2023-02-16 16:01:26 [INFO] [task_scheduler.cc:129] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #128: GFLOPs: 21.4104. Time: 4808.9334 us. Best GFLOPs: 303.6487
