2023-02-16 14:18:37 [INFO] [task_scheduler.cc:158] Initializing Task #27: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6"
2023-02-16 14:18:37 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 1, 28, 28, 512), "float32"], p1: T.Buffer[(2, 1, 1, 1, 512, 64), "float32"], p2: T.Buffer[(1, 2, 1, 1, 64), "float32"], T_relu: T.Buffer[(1, 2, 28, 28, 64), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        conv2d_NCHWc = T.alloc_buffer([1, 2, 28, 28, 64], dtype="float32")
        T_add = T.alloc_buffer([1, 2, 28, 28, 64], dtype="float32")
        for i0, i1, i2, i3, i4, i5, i6, i7 in T.grid(1, 2, 28, 28, 64, 512, 1, 1):
            with T.block("conv2d_NCHWc"):
                n, oc_chunk, oh, ow, oc_block, ic, kh, kw = T.axis.remap("SSSSSRRR", [i0, i1, i2, i3, i4, i5, i6, i7])
                T.reads(p0[n, ic // 512, oh + kh, ow + kw, ic % 512], p1[oc_chunk, ic // 512, kh, kw, ic % 512, oc_block])
                T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                with T.init():
                    conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 512, oh + kh, ow + kw, ic % 512] * p1[oc_chunk, ic // 512, kh, kw, ic % 512, oc_block]
        for i0, i1, i2, i3, i4 in T.grid(1, 2, 28, 28, 64):
            with T.block("T_add"):
                ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4], p2[ax0, ax1, 0, 0, ax4])
                T.writes(T_add[ax0, ax1, ax2, ax3, ax4])
                T_add[ax0, ax1, ax2, ax3, ax4] = conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4] + p2[ax0, ax1, 0, 0, ax4]
        for i0, i1, i2, i3, i4 in T.grid(1, 2, 28, 28, 64):
            with T.block("T_relu"):
                ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(T_add[ax0, ax1, ax2, ax3, ax4])
                T.writes(T_relu[ax0, ax1, ax2, ax3, ax4])
                T_relu[ax0, ax1, ax2, ax3, ax4] = T.max(T_add[ax0, ax1, ax2, ax3, ax4], T.float32(0))
    

2023-02-16 14:18:37 [INFO] [task_scheduler.cc:162] Total 3 design space(s) generated
2023-02-16 14:18:37 [INFO] [task_scheduler.cc:168] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 1, 28, 28, 512), "float32"], p1: T.Buffer[(2, 1, 1, 1, 512, 64), "float32"], p2: T.Buffer[(1, 2, 1, 1, 64), "float32"], T_relu: T.Buffer[(1, 2, 28, 28, 64), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":512, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 2, 28, 28, 64], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0, i0_1, i1_1, i2_1, i3_1, i4_1, i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(1, 2, 1, 1, 4, 1, 1, 7, 1, 2, 8, 1, 1, 1, 1, 4, 2, 2, 64, 1, 1, 1, 1, 1, 14, 4):
                with T.block("conv2d_NCHWc"):
                    n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                    oc_chunk = T.axis.spatial(2, i1_3 + i1_0 + i1_1 + i1_2)
                    oh = T.axis.spatial(28, i2_0 * 28 + i2_1 * 4 + i2_2 + i2_3)
                    ow = T.axis.spatial(28, i3_0 * 28 + i3_1 * 28 + i3_2 * 14 + i3_3)
                    oc_block = T.axis.spatial(64, i4_0 * 16 + i4_1 * 8 + i4_2 * 4 + i4_3)
                    ic = T.axis.reduce(512, i5_0 * 64 + i5_1)
                    kh = T.axis.reduce(1, i6_0 + i6_1)
                    kw = T.axis.reduce(1, i7_1 + i7_0)
                    T.reads(p0[n, ic // 512, oh + kh, ow + kw, ic % 512], p1[oc_chunk, ic // 512, kh, kw, ic % 512, oc_block])
                    T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                    T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                    conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 512, oh + kh, ow + kw, ic % 512] * p1[oc_chunk, ic // 512, kh, kw, ic % 512, oc_block]
            for i0, i1, i2, i3, i4 in T.grid(1, 2, 28, 28, 64):
                with T.block("T_relu"):
                    ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4], p2[ax0, ax1, 0, 0, ax4])
                    T.writes(T_relu[ax0, ax1, ax2, ax3, ax4])
                    T_relu[ax0, ax1, ax2, ax3, ax4] = T.max(conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4] + p2[ax0, ax1, 0, 0, ax4], T.float32(0))
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 4, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 2, 2, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2023-02-16 14:18:37 [INFO] [task_scheduler.cc:168] Design space #1:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 1, 28, 28, 512), "float32"], p1: T.Buffer[(2, 1, 1, 1, 512, 64), "float32"], p2: T.Buffer[(1, 2, 1, 1, 64), "float32"], T_relu: T.Buffer[(1, 2, 28, 28, 64), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":64, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 2, 28, 28, 64], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0, i0_1, i1_1, i2_1, i3_1, i4_1 in T.grid(1, 2, 1, 1, 4, 1, 1, 7, 1, 2):
                for i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(8, 1, 1, 1, 1, 4, 2, 2, 64, 1, 1, 1, 1, 1, 14, 4):
                    with T.block("conv2d_NCHWc"):
                        n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                        oc_chunk = T.axis.spatial(2, i1_3 + i1_0 + i1_1 + i1_2)
                        oh = T.axis.spatial(28, i2_0 * 28 + i2_1 * 4 + i2_2 + i2_3)
                        ow = T.axis.spatial(28, i3_0 * 28 + i3_1 * 28 + i3_2 * 14 + i3_3)
                        oc_block = T.axis.spatial(64, i4_0 * 16 + i4_1 * 8 + i4_2 * 4 + i4_3)
                        ic = T.axis.reduce(512, i5_0 * 64 + i5_1)
                        kh = T.axis.reduce(1, i6_0 + i6_1)
                        kw = T.axis.reduce(1, i7_1 + i7_0)
                        T.reads(p0[n, ic // 512, oh + kh, ow + kw, ic % 512], p1[oc_chunk, ic // 512, kh, kw, ic % 512, oc_block])
                        T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                        T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 512, oh + kh, ow + kw, ic % 512] * p1[oc_chunk, ic // 512, kh, kw, ic % 512, oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(1, 1, 4, 28, 8):
                    with T.block("T_relu"):
                        ax0_1 = T.axis.spatial(1, ax0)
                        ax1_1 = T.axis.spatial(2, i1_0 + ax1)
                        ax2_1 = T.axis.spatial(28, i2_1 * 4 + ax2)
                        ax3_1 = T.axis.spatial(28, ax3)
                        ax4_1 = T.axis.spatial(64, i4_0 * 16 + i4_1 * 8 + ax4)
                        T.reads(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p2[ax0_1, ax1_1, 0, 0, ax4_1])
                        T.writes(T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] = T.max(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p2[ax0_1, ax1_1, 0, 0, ax4_1], T.float32(0))
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 4, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 2, 2, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2023-02-16 14:18:37 [INFO] [task_scheduler.cc:168] Design space #2:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 1, 28, 28, 512), "float32"], p1: T.Buffer[(2, 1, 1, 1, 512, 64), "float32"], p2: T.Buffer[(1, 2, 1, 1, 64), "float32"], T_relu: T.Buffer[(1, 2, 28, 28, 64), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":512, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 2, 28, 28, 64], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0 in T.grid(1, 2, 1, 1, 4):
                for i0_1, i1_1, i2_1, i3_1, i4_1, i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(1, 1, 7, 1, 2, 8, 1, 1, 1, 1, 4, 2, 2, 64, 1, 1, 1, 1, 1, 14, 4):
                    with T.block("conv2d_NCHWc"):
                        n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                        oc_chunk = T.axis.spatial(2, i1_3 + i1_0 + i1_1 + i1_2)
                        oh = T.axis.spatial(28, i2_0 * 28 + i2_1 * 4 + i2_2 + i2_3)
                        ow = T.axis.spatial(28, i3_0 * 28 + i3_1 * 28 + i3_2 * 14 + i3_3)
                        oc_block = T.axis.spatial(64, i4_0 * 16 + i4_1 * 8 + i4_2 * 4 + i4_3)
                        ic = T.axis.reduce(512, i5_0 * 64 + i5_1)
                        kh = T.axis.reduce(1, i6_0 + i6_1)
                        kw = T.axis.reduce(1, i7_1 + i7_0)
                        T.reads(p0[n, ic // 512, oh + kh, ow + kw, ic % 512], p1[oc_chunk, ic // 512, kh, kw, ic % 512, oc_block])
                        T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                        T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 512, oh + kh, ow + kw, ic % 512] * p1[oc_chunk, ic // 512, kh, kw, ic % 512, oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(1, 1, 28, 28, 16):
                    with T.block("T_relu"):
                        ax0_1 = T.axis.spatial(1, ax0)
                        ax1_1 = T.axis.spatial(2, i1_0 + ax1)
                        ax2_1, ax3_1 = T.axis.remap("SS", [ax2, ax3])
                        ax4_1 = T.axis.spatial(64, i4_0 * 16 + ax4)
                        T.reads(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p2[ax0_1, ax1_1, 0, 0, ax4_1])
                        T.writes(T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] = T.max(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p2[ax0_1, ax1_1, 0, 0, ax4_1], T.float32(0))
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 4, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 2, 2, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2023-02-16 14:20:38 [INFO] [task_scheduler.cc:158] Initializing Task #27: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6"
2023-02-16 14:20:38 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 1, 28, 28, 512), "float32"], p1: T.Buffer[(2, 1, 1, 1, 512, 64), "float32"], p2: T.Buffer[(1, 2, 1, 1, 64), "float32"], T_relu: T.Buffer[(1, 2, 28, 28, 64), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        conv2d_NCHWc = T.alloc_buffer([1, 2, 28, 28, 64], dtype="float32")
        T_add = T.alloc_buffer([1, 2, 28, 28, 64], dtype="float32")
        for i0, i1, i2, i3, i4, i5, i6, i7 in T.grid(1, 2, 28, 28, 64, 512, 1, 1):
            with T.block("conv2d_NCHWc"):
                n, oc_chunk, oh, ow, oc_block, ic, kh, kw = T.axis.remap("SSSSSRRR", [i0, i1, i2, i3, i4, i5, i6, i7])
                T.reads(p0[n, ic // 512, oh + kh, ow + kw, ic % 512], p1[oc_chunk, ic // 512, kh, kw, ic % 512, oc_block])
                T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                with T.init():
                    conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 512, oh + kh, ow + kw, ic % 512] * p1[oc_chunk, ic // 512, kh, kw, ic % 512, oc_block]
        for i0, i1, i2, i3, i4 in T.grid(1, 2, 28, 28, 64):
            with T.block("T_add"):
                ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4], p2[ax0, ax1, 0, 0, ax4])
                T.writes(T_add[ax0, ax1, ax2, ax3, ax4])
                T_add[ax0, ax1, ax2, ax3, ax4] = conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4] + p2[ax0, ax1, 0, 0, ax4]
        for i0, i1, i2, i3, i4 in T.grid(1, 2, 28, 28, 64):
            with T.block("T_relu"):
                ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(T_add[ax0, ax1, ax2, ax3, ax4])
                T.writes(T_relu[ax0, ax1, ax2, ax3, ax4])
                T_relu[ax0, ax1, ax2, ax3, ax4] = T.max(T_add[ax0, ax1, ax2, ax3, ax4], T.float32(0))
    

2023-02-16 14:20:38 [INFO] [task_scheduler.cc:162] Total 3 design space(s) generated
2023-02-16 14:20:38 [INFO] [task_scheduler.cc:168] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 1, 28, 28, 512), "float32"], p1: T.Buffer[(2, 1, 1, 1, 512, 64), "float32"], p2: T.Buffer[(1, 2, 1, 1, 64), "float32"], T_relu: T.Buffer[(1, 2, 28, 28, 64), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":16, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 2, 28, 28, 64], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0, i0_1, i1_1, i2_1, i3_1, i4_1, i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(1, 1, 4, 1, 1, 1, 1, 1, 7, 2, 32, 1, 1, 1, 2, 1, 2, 16, 16, 1, 1, 1, 1, 7, 2, 2):
                with T.block("conv2d_NCHWc"):
                    n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                    oc_chunk = T.axis.spatial(2, i1_3 + i1_0 * 2 + i1_1 * 2 + i1_2)
                    oh = T.axis.spatial(28, i2_0 * 7 + i2_1 * 7 + i2_2 * 7 + i2_3)
                    ow = T.axis.spatial(28, i3_0 * 28 + i3_1 * 4 + i3_2 * 2 + i3_3)
                    oc_block = T.axis.spatial(64, i4_0 * 64 + i4_1 * 32 + i4_2 * 2 + i4_3)
                    ic = T.axis.reduce(512, i5_0 * 16 + i5_1)
                    kh = T.axis.reduce(1, i6_0 + i6_1)
                    kw = T.axis.reduce(1, i7_1 + i7_0)
                    T.reads(p0[n, ic // 512, oh + kh, ow + kw, ic % 512], p1[oc_chunk, ic // 512, kh, kw, ic % 512, oc_block])
                    T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                    T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                    conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 512, oh + kh, ow + kw, ic % 512] * p1[oc_chunk, ic // 512, kh, kw, ic % 512, oc_block]
            for i0, i1, i2, i3, i4 in T.grid(1, 2, 28, 28, 64):
                with T.block("T_relu"):
                    ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4], p2[ax0, ax1, 0, 0, ax4])
                    T.writes(T_relu[ax0, ax1, ax2, ax3, ax4])
                    T_relu[ax0, ax1, ax2, ax3, ax4] = T.max(conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4] + p2[ax0, ax1, 0, 0, ax4], T.float32(0))
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 16, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2023-02-16 14:20:38 [INFO] [task_scheduler.cc:168] Design space #1:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 1, 28, 28, 512), "float32"], p1: T.Buffer[(2, 1, 1, 1, 512, 64), "float32"], p2: T.Buffer[(1, 2, 1, 1, 64), "float32"], T_relu: T.Buffer[(1, 2, 28, 28, 64), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":512, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 2, 28, 28, 64], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0, i0_1, i1_1, i2_1, i3_1, i4_1 in T.grid(1, 1, 4, 1, 1, 1, 1, 1, 7, 2):
                for i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(32, 1, 1, 1, 2, 1, 2, 16, 16, 1, 1, 1, 1, 7, 2, 2):
                    with T.block("conv2d_NCHWc"):
                        n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                        oc_chunk = T.axis.spatial(2, i1_3 + i1_0 * 2 + i1_1 * 2 + i1_2)
                        oh = T.axis.spatial(28, i2_0 * 7 + i2_1 * 7 + i2_2 * 7 + i2_3)
                        ow = T.axis.spatial(28, i3_0 * 28 + i3_1 * 4 + i3_2 * 2 + i3_3)
                        oc_block = T.axis.spatial(64, i4_0 * 64 + i4_1 * 32 + i4_2 * 2 + i4_3)
                        ic = T.axis.reduce(512, i5_0 * 16 + i5_1)
                        kh = T.axis.reduce(1, i6_0 + i6_1)
                        kw = T.axis.reduce(1, i7_1 + i7_0)
                        T.reads(p0[n, ic // 512, oh + kh, ow + kw, ic % 512], p1[oc_chunk, ic // 512, kh, kw, ic % 512, oc_block])
                        T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                        T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 512, oh + kh, ow + kw, ic % 512] * p1[oc_chunk, ic // 512, kh, kw, ic % 512, oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(1, 2, 7, 4, 32):
                    with T.block("T_relu"):
                        ax0_1, ax1_1 = T.axis.remap("SS", [ax0, ax1])
                        ax2_1 = T.axis.spatial(28, i2_0 * 7 + ax2)
                        ax3_1 = T.axis.spatial(28, i3_1 * 4 + ax3)
                        ax4_1 = T.axis.spatial(64, i4_1 * 32 + ax4)
                        T.reads(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p2[ax0_1, ax1_1, 0, 0, ax4_1])
                        T.writes(T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] = T.max(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p2[ax0_1, ax1_1, 0, 0, ax4_1], T.float32(0))
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 16, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2023-02-16 14:20:38 [INFO] [task_scheduler.cc:168] Design space #2:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 1, 28, 28, 512), "float32"], p1: T.Buffer[(2, 1, 1, 1, 512, 64), "float32"], p2: T.Buffer[(1, 2, 1, 1, 64), "float32"], T_relu: T.Buffer[(1, 2, 28, 28, 64), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":0, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 2, 28, 28, 64], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0 in T.grid(1, 1, 4, 1, 1):
                for i0_1, i1_1, i2_1, i3_1, i4_1, i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(1, 1, 1, 7, 2, 32, 1, 1, 1, 2, 1, 2, 16, 16, 1, 1, 1, 1, 7, 2, 2):
                    with T.block("conv2d_NCHWc"):
                        n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                        oc_chunk = T.axis.spatial(2, i1_3 + i1_0 * 2 + i1_1 * 2 + i1_2)
                        oh = T.axis.spatial(28, i2_0 * 7 + i2_1 * 7 + i2_2 * 7 + i2_3)
                        ow = T.axis.spatial(28, i3_0 * 28 + i3_1 * 4 + i3_2 * 2 + i3_3)
                        oc_block = T.axis.spatial(64, i4_0 * 64 + i4_1 * 32 + i4_2 * 2 + i4_3)
                        ic = T.axis.reduce(512, i5_0 * 16 + i5_1)
                        kh = T.axis.reduce(1, i6_0 + i6_1)
                        kw = T.axis.reduce(1, i7_1 + i7_0)
                        T.reads(p0[n, ic // 512, oh + kh, ow + kw, ic % 512], p1[oc_chunk, ic // 512, kh, kw, ic % 512, oc_block])
                        T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                        T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 512, oh + kh, ow + kw, ic % 512] * p1[oc_chunk, ic // 512, kh, kw, ic % 512, oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(1, 2, 7, 28, 64):
                    with T.block("T_relu"):
                        ax0_1, ax1_1 = T.axis.remap("SS", [ax0, ax1])
                        ax2_1 = T.axis.spatial(28, i2_0 * 7 + ax2)
                        ax3_1, ax4_1 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p2[ax0_1, ax1_1, 0, 0, ax4_1])
                        T.writes(T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] = T.max(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p2[ax0_1, ax1_1, 0, 0, ax4_1], T.float32(0))
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 16, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2023-02-16 14:55:44 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-02-16 14:55:44 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2023-02-16 14:55:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1f4144c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1f216458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x31c643c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x36cf2dc8)]: 0 failure(s)
2023-02-16 14:55:45 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2023-02-16 14:55:46 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1f4144c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1f216458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x31c643c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x36cf2dc8)]: 0 failure(s)
2023-02-16 14:55:46 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1f4144c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1f216458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x31c643c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x36cf2dc8)]: 0 failure(s)
2023-02-16 14:55:47 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1f4144c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1f216458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x31c643c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x36cf2dc8)]: 0 failure(s)
2023-02-16 14:55:48 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1f4144c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1f216458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x31c643c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x36cf2dc8)]: 0 failure(s)
2023-02-16 14:55:48 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9992  0.9982  0.9979  0.9973  0.9971  0.9971  0.9969  0.9963  0.9954  0.9952  0.9943  0.9927  0.9920  0.9915  0.9914
[17 : 32]:	0.9909  0.9902  0.9884  0.9870  0.9867  0.9865  0.9863  0.9861  0.9860  0.9858  0.9855  0.9853  0.9852  0.9839  0.9834  0.9833
[33 : 48]:	0.9825  0.9824  0.9823  0.9810  0.9809  0.9799  0.9797  0.9794  0.9770  0.9767  0.9766  0.9753  0.9750  0.9748  0.9747  0.9744
[49 : 64]:	0.9733  0.9732  0.9732  0.9730  0.9730  0.9709  0.9709  0.9708  0.9700  0.9696  0.9692  0.9685  0.9681  0.9678  0.9674  0.9666
2023-02-16 14:55:48 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-02-16 14:55:48 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1: GFLOPs: 50.5328. Time: 2037.5103 us. Best GFLOPs: 50.5328
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #2: GFLOPs: 43.7966. Time: 2350.8926 us. Best GFLOPs: 50.5328
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #3: GFLOPs: 69.1621. Time: 1488.6940 us. Best GFLOPs: 69.1621
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #4: GFLOPs: 40.0797. Time: 2568.9135 us. Best GFLOPs: 69.1621
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #5: GFLOPs: 29.5397. Time: 3485.5198 us. Best GFLOPs: 69.1621
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #6: GFLOPs: 17.8719. Time: 5761.0577 us. Best GFLOPs: 69.1621
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #7: GFLOPs: 94.7454. Time: 1086.7138 us. Best GFLOPs: 94.7454
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #8: GFLOPs: 57.0288. Time: 1805.4253 us. Best GFLOPs: 94.7454
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #9: GFLOPs: 42.7805. Time: 2406.7306 us. Best GFLOPs: 94.7454
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #10: GFLOPs: 5.4166. Time: 19008.6060 us. Best GFLOPs: 94.7454
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #11: GFLOPs: 14.3852. Time: 7157.4394 us. Best GFLOPs: 94.7454
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #12: GFLOPs: 3.0136. Time: 34165.6484 us. Best GFLOPs: 94.7454
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #13: GFLOPs: 101.1724. Time: 1017.6805 us. Best GFLOPs: 101.1724
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #14: GFLOPs: 16.2630. Time: 6330.9916 us. Best GFLOPs: 101.1724
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #15: GFLOPs: 60.7523. Time: 1694.7707 us. Best GFLOPs: 101.1724
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #16: GFLOPs: 11.0213. Time: 9341.9943 us. Best GFLOPs: 101.1724
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #17: GFLOPs: 16.1190. Time: 6387.5533 us. Best GFLOPs: 101.1724
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #18: GFLOPs: 6.7103. Time: 15343.7939 us. Best GFLOPs: 101.1724
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #19: GFLOPs: 22.0012. Time: 4679.8075 us. Best GFLOPs: 101.1724
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #20: GFLOPs: 34.5350. Time: 2981.3602 us. Best GFLOPs: 101.1724
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #21: GFLOPs: 30.9871. Time: 3322.7085 us. Best GFLOPs: 101.1724
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #22: GFLOPs: 47.9941. Time: 2145.2881 us. Best GFLOPs: 101.1724
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #23: GFLOPs: 21.8953. Time: 4702.4360 us. Best GFLOPs: 101.1724
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #24: GFLOPs: 13.0352. Time: 7898.6793 us. Best GFLOPs: 101.1724
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #25: GFLOPs: 26.8935. Time: 3828.4776 us. Best GFLOPs: 101.1724
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #26: GFLOPs: 59.6389. Time: 1726.4096 us. Best GFLOPs: 101.1724
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #27: GFLOPs: 19.4345. Time: 5297.8584 us. Best GFLOPs: 101.1724
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #28: GFLOPs: 16.0051. Time: 6433.0378 us. Best GFLOPs: 101.1724
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #29: GFLOPs: 75.9987. Time: 1354.7745 us. Best GFLOPs: 101.1724
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #30: GFLOPs: 3.2775. Time: 31414.7651 us. Best GFLOPs: 101.1724
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #31: GFLOPs: 131.6377. Time: 782.1553 us. Best GFLOPs: 131.6377
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #32: GFLOPs: 13.9521. Time: 7379.6413 us. Best GFLOPs: 131.6377
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #33: GFLOPs: 165.4295. Time: 622.3870 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #34: GFLOPs: 60.9149. Time: 1690.2453 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #35: GFLOPs: 5.3240. Time: 19339.2312 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #36: GFLOPs: 37.7560. Time: 2727.0112 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #37: GFLOPs: 6.4043. Time: 16076.8124 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #38: GFLOPs: 29.1801. Time: 3528.4736 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #39: GFLOPs: 56.2854. Time: 1829.2708 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #40: GFLOPs: 44.9012. Time: 2293.0622 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #41: GFLOPs: 88.4709. Time: 1163.7853 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #42: GFLOPs: 35.5513. Time: 2896.1309 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #43: GFLOPs: 134.2554. Time: 766.9050 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #44: GFLOPs: 20.4246. Time: 5041.0356 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #45: GFLOPs: 39.8703. Time: 2582.4048 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #46: GFLOPs: 5.2503. Time: 19610.4367 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #47: GFLOPs: 154.9166. Time: 664.6231 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #48: GFLOPs: 88.3655. Time: 1165.1732 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #49: GFLOPs: 18.0235. Time: 5712.6144 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #50: GFLOPs: 32.4259. Time: 3175.2762 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #51: GFLOPs: 3.4116. Time: 30179.9133 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #52: GFLOPs: 19.0368. Time: 5408.5307 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #53: GFLOPs: 138.4531. Time: 743.6538 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #54: GFLOPs: 63.3965. Time: 1624.0832 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #55: GFLOPs: 18.8639. Time: 5458.0973 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #56: GFLOPs: 34.7078. Time: 2966.5124 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #57: GFLOPs: 13.3655. Time: 7703.4818 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #58: GFLOPs: 17.6950. Time: 5818.6717 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #59: GFLOPs: 27.4174. Time: 3755.3159 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #60: GFLOPs: 37.8780. Time: 2718.2312 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #61: GFLOPs: 13.1736. Time: 7815.7104 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #62: GFLOPs: 38.6529. Time: 2663.7371 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #63: GFLOPs: 32.5737. Time: 3160.8655 us. Best GFLOPs: 165.4295
2023-02-16 15:36:29 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #64: GFLOPs: 43.3685. Time: 2374.1025 us. Best GFLOPs: 165.4295
2023-02-16 15:56:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-02-16 15:56:52 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2023-02-16 15:56:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1f4144c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1f216458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x31c643c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x36cf2dc8)]: 0 failure(s)
2023-02-16 15:56:53 [INFO] [evolutionary_search.cc:723] Sampled 448 candidate(s)
2023-02-16 15:56:55 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1f4144c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1f216458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x31c643c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x36cf2dc8)]: 0 failure(s)
2023-02-16 15:56:57 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1f4144c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1f216458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x31c643c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x36cf2dc8)]: 0 failure(s)
2023-02-16 15:56:59 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1f4144c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1f216458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x31c643c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x36cf2dc8)]: 0 failure(s)
2023-02-16 15:57:01 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1f4144c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1f216458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x31c643c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x36cf2dc8)]: 0 failure(s)
2023-02-16 15:57:02 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9829  0.9814  0.9791  0.9602  0.9492  0.9428  0.9341  0.9330  0.9330  0.9324  0.9302  0.9294  0.9267  0.9267  0.9267  0.9267
[17 : 32]:	0.9267  0.9190  0.9190  0.9190  0.9190  0.9190  0.9181  0.9181  0.9131  0.9108  0.9101  0.9078  0.9071  0.9071  0.9067  0.9012
[33 : 48]:	0.9012  0.9004  0.9000  0.8990  0.8977  0.8973  0.8969  0.8961  0.8956  0.8921  0.8919  0.8905  0.8894  0.8893  0.8891  0.8881
[49 : 64]:	0.8859  0.8847  0.8847  0.8835  0.8822  0.8809  0.8774  0.8774  0.8767  0.8745  0.8705  0.8678  0.8669  0.8662  0.8658  0.8653
2023-02-16 15:57:02 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-02-16 15:57:02 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #65: GFLOPs: 66.1991. Time: 1555.3256 us. Best GFLOPs: 165.4295
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #66: GFLOPs: 139.4421. Time: 738.3794 us. Best GFLOPs: 165.4295
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #67: GFLOPs: 136.4582. Time: 754.5253 us. Best GFLOPs: 165.4295
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #68: GFLOPs: 152.6844. Time: 674.3399 us. Best GFLOPs: 165.4295
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #69: GFLOPs: 221.6909. Time: 464.4357 us. Best GFLOPs: 221.6909
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #70: GFLOPs: 154.0048. Time: 668.5580 us. Best GFLOPs: 221.6909
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #71: GFLOPs: 137.8007. Time: 747.1746 us. Best GFLOPs: 221.6909
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #72: GFLOPs: 149.8265. Time: 687.2026 us. Best GFLOPs: 221.6909
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #73: GFLOPs: 167.0072. Time: 616.5074 us. Best GFLOPs: 221.6909
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #74: GFLOPs: 146.6937. Time: 701.8786 us. Best GFLOPs: 221.6909
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #75: GFLOPs: 156.6054. Time: 657.4558 us. Best GFLOPs: 221.6909
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #76: GFLOPs: 192.0134. Time: 536.2186 us. Best GFLOPs: 221.6909
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #77: GFLOPs: 143.7731. Time: 716.1364 us. Best GFLOPs: 221.6909
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #78: GFLOPs: 182.0453. Time: 565.5800 us. Best GFLOPs: 221.6909
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #79: GFLOPs: 159.0446. Time: 647.3727 us. Best GFLOPs: 221.6909
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #80: GFLOPs: 163.8346. Time: 628.4455 us. Best GFLOPs: 221.6909
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #81: GFLOPs: 143.7499. Time: 716.2518 us. Best GFLOPs: 221.6909
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #82: GFLOPs: 136.0623. Time: 756.7208 us. Best GFLOPs: 221.6909
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #83: GFLOPs: 136.3718. Time: 755.0032 us. Best GFLOPs: 221.6909
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #84: GFLOPs: 199.4347. Time: 516.2649 us. Best GFLOPs: 221.6909
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #85: GFLOPs: 117.7901. Time: 874.1072 us. Best GFLOPs: 221.6909
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #86: GFLOPs: 138.6157. Time: 742.7813 us. Best GFLOPs: 221.6909
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #87: GFLOPs: 186.5569. Time: 551.9022 us. Best GFLOPs: 221.6909
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #88: GFLOPs: 146.8756. Time: 701.0091 us. Best GFLOPs: 221.6909
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #89: GFLOPs: 131.5602. Time: 782.6160 us. Best GFLOPs: 221.6909
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #90: GFLOPs: 164.3697. Time: 626.3999 us. Best GFLOPs: 221.6909
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #91: GFLOPs: 142.6279. Time: 721.8863 us. Best GFLOPs: 221.6909
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #92: GFLOPs: 140.3299. Time: 733.7081 us. Best GFLOPs: 221.6909
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #93: GFLOPs: 240.2030. Time: 428.6423 us. Best GFLOPs: 240.2030
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #94: GFLOPs: 297.3761. Time: 346.2321 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #95: GFLOPs: 263.8293. Time: 390.2568 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #96: GFLOPs: 128.3032. Time: 802.4832 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #97: GFLOPs: 140.9346. Time: 730.5598 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #98: GFLOPs: 252.8449. Time: 407.2107 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #99: GFLOPs: 245.3025. Time: 419.7314 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #100: GFLOPs: 219.8777. Time: 468.2656 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #101: GFLOPs: 217.1206. Time: 474.2117 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #102: GFLOPs: 185.8435. Time: 554.0207 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #103: GFLOPs: 105.1089. Time: 979.5661 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #104: GFLOPs: 219.6088. Time: 468.8390 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #105: GFLOPs: 146.9257. Time: 700.7701 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #106: GFLOPs: 139.1191. Time: 740.0933 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #107: GFLOPs: 140.5516. Time: 732.5507 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #108: GFLOPs: 176.1871. Time: 584.3853 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #109: GFLOPs: 205.8949. Time: 500.0666 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #110: GFLOPs: 144.6982. Time: 711.5580 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #111: GFLOPs: 194.0526. Time: 530.5838 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #112: GFLOPs: 219.3584. Time: 469.3740 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #113: GFLOPs: 132.5811. Time: 776.5902 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #114: GFLOPs: 141.2216. Time: 729.0749 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #115: GFLOPs: 144.2102. Time: 713.9657 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #116: GFLOPs: 177.7676. Time: 579.1896 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #117: GFLOPs: 91.6892. Time: 1122.9365 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #118: GFLOPs: 144.9337. Time: 710.4018 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #119: GFLOPs: 119.7636. Time: 859.7033 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #120: GFLOPs: 107.8887. Time: 954.3276 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #121: GFLOPs: 196.6352. Time: 523.6151 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #122: GFLOPs: 213.7164. Time: 481.7654 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #123: GFLOPs: 122.1361. Time: 843.0034 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #124: GFLOPs: 132.5557. Time: 776.7390 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #125: GFLOPs: 151.8429. Time: 678.0769 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #126: GFLOPs: 4.2475. Time: 24240.5769 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #127: GFLOPs: 51.6211. Time: 1994.5565 us. Best GFLOPs: 297.3761
2023-02-16 15:59:15 [INFO] [task_scheduler.cc:129] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #128: GFLOPs: 10.1358. Time: 10158.1519 us. Best GFLOPs: 297.3761
