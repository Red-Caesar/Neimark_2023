2023-02-16 14:18:38 [INFO] [task_scheduler.cc:158] Initializing Task #55: "fused_layout_transform_reshape"
2023-02-16 14:18:38 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 64, 1, 1, 32), "float32"], T_reshape: T.Buffer[(1, 2048), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        T_layout_trans = T.alloc_buffer([1, 2048, 1, 1], dtype="float32")
        for i0, i1, i2, i3 in T.grid(1, 2048, 1, 1):
            with T.block("T_layout_trans"):
                ax0, ax1, ax2, ax3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[ax0, ax1 // 32, ax2, ax3, ax1 % 32])
                T.writes(T_layout_trans[ax0, ax1, ax2, ax3])
                T_layout_trans[ax0, ax1, ax2, ax3] = T.if_then_else(ax0 < 1 and ax1 < 2048 and ax2 < 1 and ax3 < 1, p0[ax0, ax1 // 32, ax2, ax3, ax1 % 32], T.float32(0), dtype="float32")
        for i0, i1 in T.grid(1, 2048):
            with T.block("T_reshape"):
                ax0, ax1 = T.axis.remap("SS", [i0, i1])
                T.reads(T_layout_trans[0, ax1 % 2048, 0, 0])
                T.writes(T_reshape[ax0, ax1])
                T_reshape[ax0, ax1] = T_layout_trans[0, ax1 % 2048, 0, 0]
    

2023-02-16 14:18:38 [INFO] [task_scheduler.cc:162] Total 1 design space(s) generated
2023-02-16 14:18:38 [INFO] [task_scheduler.cc:168] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 64, 1, 1, 32), "float32"], T_reshape: T.Buffer[(1, 2048), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.vectorize":64})
            for i0, i1 in T.grid(1, 2048):
                with T.block("T_reshape"):
                    ax0, ax1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[0, ax1 % 2048 // 32, 0, 0, ax1 % 32])
                    T.writes(T_reshape[ax0, ax1])
                    T_reshape[ax0, ax1] = T.if_then_else(T.LT(0, 1) and ax1 % 2048 < 2048 and T.LT(0, 1) and T.LT(0, 1), p0[0, ax1 % 2048 // 32, 0, 0, ax1 % 2048 % 32], T.float32(0), dtype="float32")
    

b0 = sch.get_block(name="T_layout_trans", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
2023-02-16 14:20:39 [INFO] [task_scheduler.cc:158] Initializing Task #55: "fused_layout_transform_reshape"
2023-02-16 14:20:39 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 64, 1, 1, 32), "float32"], T_reshape: T.Buffer[(1, 2048), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        T_layout_trans = T.alloc_buffer([1, 2048, 1, 1], dtype="float32")
        for i0, i1, i2, i3 in T.grid(1, 2048, 1, 1):
            with T.block("T_layout_trans"):
                ax0, ax1, ax2, ax3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[ax0, ax1 // 32, ax2, ax3, ax1 % 32])
                T.writes(T_layout_trans[ax0, ax1, ax2, ax3])
                T_layout_trans[ax0, ax1, ax2, ax3] = T.if_then_else(ax0 < 1 and ax1 < 2048 and ax2 < 1 and ax3 < 1, p0[ax0, ax1 // 32, ax2, ax3, ax1 % 32], T.float32(0), dtype="float32")
        for i0, i1 in T.grid(1, 2048):
            with T.block("T_reshape"):
                ax0, ax1 = T.axis.remap("SS", [i0, i1])
                T.reads(T_layout_trans[0, ax1 % 2048, 0, 0])
                T.writes(T_reshape[ax0, ax1])
                T_reshape[ax0, ax1] = T_layout_trans[0, ax1 % 2048, 0, 0]
    

2023-02-16 14:20:39 [INFO] [task_scheduler.cc:162] Total 1 design space(s) generated
2023-02-16 14:20:39 [INFO] [task_scheduler.cc:168] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 64, 1, 1, 32), "float32"], T_reshape: T.Buffer[(1, 2048), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.vectorize":64})
            for i0, i1 in T.grid(1, 2048):
                with T.block("T_reshape"):
                    ax0, ax1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[0, ax1 % 2048 // 32, 0, 0, ax1 % 32])
                    T.writes(T_reshape[ax0, ax1])
                    T_reshape[ax0, ax1] = T.if_then_else(T.LT(0, 1) and ax1 % 2048 < 2048 and T.LT(0, 1) and T.LT(0, 1), p0[0, ax1 % 2048 // 32, 0, 0, ax1 % 2048 % 32], T.float32(0), dtype="float32")
    

b0 = sch.get_block(name="T_layout_trans", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
2023-02-16 15:33:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-02-16 15:33:52 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2023-02-16 15:33:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2ea76738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x2143abf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x325208e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21349558)]: 0 failure(s)
2023-02-16 15:33:52 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2023-02-16 15:33:52 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2ea76738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x2143abf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x325208e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21349558)]: 0 failure(s)
2023-02-16 15:33:52 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2ea76738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x2143abf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x325208e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21349558)]: 0 failure(s)
2023-02-16 15:33:52 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2ea76738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x2143abf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x325208e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21349558)]: 0 failure(s)
2023-02-16 15:33:52 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2ea76738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x2143abf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x325208e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21349558)]: 0 failure(s)
2023-02-16 15:33:53 [INFO] [evolutionary_search.cc:649] Scores of the best 1 candidates:
[1 : 1]:	0.3636
2023-02-16 15:33:53 [INFO] [evolutionary_search.cc:727] Got 1 candidate(s) with evolutionary search
2023-02-16 15:33:53 [INFO] [evolutionary_search.cc:730] Sending 1 candidates(s) for measurement
2023-02-16 15:36:43 [INFO] [task_scheduler.cc:129] [Task #55: fused_layout_transform_reshape] Trial #1: GFLOPs: 0.0003. Time: 3.2785 us. Best GFLOPs: 0.0003
