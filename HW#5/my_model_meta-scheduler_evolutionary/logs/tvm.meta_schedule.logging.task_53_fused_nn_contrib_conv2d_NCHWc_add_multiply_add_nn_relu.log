2023-02-16 14:18:38 [INFO] [task_scheduler.cc:158] Initializing Task #53: "fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu"
2023-02-16 14:18:38 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 128, 7, 7, 4), "float32"], p1: T.Buffer[(64, 128, 1, 1, 4, 32), "float32"], p2: T.Buffer[(1, 64, 7, 7, 32), "float32"], p3: T.Buffer[(1, 64, 1, 1, 32), "float32"], p4: T.Buffer[(1, 64, 1, 1, 32), "float32"], T_relu: T.Buffer[(1, 64, 7, 7, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        conv2d_NCHWc = T.alloc_buffer([1, 64, 7, 7, 32], dtype="float32")
        T_add = T.alloc_buffer([1, 64, 7, 7, 32], dtype="float32")
        T_multiply = T.alloc_buffer([1, 64, 7, 7, 32], dtype="float32")
        T_add_1 = T.alloc_buffer([1, 64, 7, 7, 32], dtype="float32")
        for i0, i1, i2, i3, i4, i5, i6, i7 in T.grid(1, 64, 7, 7, 32, 512, 1, 1):
            with T.block("conv2d_NCHWc"):
                n, oc_chunk, oh, ow, oc_block, ic, kh, kw = T.axis.remap("SSSSSRRR", [i0, i1, i2, i3, i4, i5, i6, i7])
                T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                with T.init():
                    conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
        for i0, i1, i2, i3, i4 in T.grid(1, 64, 7, 7, 32):
            with T.block("T_add"):
                ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4], p2[ax0, ax1, ax2, ax3, ax4])
                T.writes(T_add[ax0, ax1, ax2, ax3, ax4])
                T_add[ax0, ax1, ax2, ax3, ax4] = conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4] + p2[ax0, ax1, ax2, ax3, ax4]
        for i0, i1, i2, i3, i4 in T.grid(1, 64, 7, 7, 32):
            with T.block("T_multiply"):
                ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(T_add[ax0, ax1, ax2, ax3, ax4], p3[ax0, ax1, 0, 0, ax4])
                T.writes(T_multiply[ax0, ax1, ax2, ax3, ax4])
                T_multiply[ax0, ax1, ax2, ax3, ax4] = T_add[ax0, ax1, ax2, ax3, ax4] * p3[ax0, ax1, 0, 0, ax4]
        for i0, i1, i2, i3, i4 in T.grid(1, 64, 7, 7, 32):
            with T.block("T_add_1"):
                ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(T_multiply[ax0, ax1, ax2, ax3, ax4], p4[ax0, ax1, 0, 0, ax4])
                T.writes(T_add_1[ax0, ax1, ax2, ax3, ax4])
                T_add_1[ax0, ax1, ax2, ax3, ax4] = T_multiply[ax0, ax1, ax2, ax3, ax4] + p4[ax0, ax1, 0, 0, ax4]
        for i0, i1, i2, i3, i4 in T.grid(1, 64, 7, 7, 32):
            with T.block("T_relu"):
                ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(T_add_1[ax0, ax1, ax2, ax3, ax4])
                T.writes(T_relu[ax0, ax1, ax2, ax3, ax4])
                T_relu[ax0, ax1, ax2, ax3, ax4] = T.max(T_add_1[ax0, ax1, ax2, ax3, ax4], T.float32(0))
    

2023-02-16 14:18:38 [INFO] [task_scheduler.cc:162] Total 3 design space(s) generated
2023-02-16 14:18:38 [INFO] [task_scheduler.cc:168] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 128, 7, 7, 4), "float32"], p1: T.Buffer[(64, 128, 1, 1, 4, 32), "float32"], p2: T.Buffer[(1, 64, 7, 7, 32), "float32"], p3: T.Buffer[(1, 64, 1, 1, 32), "float32"], p4: T.Buffer[(1, 64, 1, 1, 32), "float32"], T_relu: T.Buffer[(1, 64, 7, 7, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":0, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 64, 7, 7, 32], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0, i0_1, i1_1, i2_1, i3_1, i4_1, i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(1, 1, 1, 1, 1, 1, 8, 1, 1, 8, 32, 1, 1, 1, 4, 1, 7, 4, 16, 1, 1, 1, 2, 7, 1, 1):
                with T.block("conv2d_NCHWc"):
                    n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                    oc_chunk = T.axis.spatial(64, i1_0 * 64 + i1_1 * 8 + i1_2 * 2 + i1_3)
                    oh = T.axis.spatial(7, i2_0 * 7 + i2_1 * 7 + i2_2 * 7 + i2_3)
                    ow = T.axis.spatial(7, i3_3 + i3_0 * 7 + i3_1 * 7 + i3_2)
                    oc_block = T.axis.spatial(32, i4_0 * 32 + i4_1 * 4 + i4_2 + i4_3)
                    ic = T.axis.reduce(512, i5_0 * 16 + i5_1)
                    kh = T.axis.reduce(1, i6_0 + i6_1)
                    kw = T.axis.reduce(1, i7_1 + i7_0)
                    T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                    T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                    T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                    conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
            for i0, i1, i2, i3, i4 in T.grid(1, 64, 7, 7, 32):
                with T.block("T_relu"):
                    ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4], p2[ax0, ax1, ax2, ax3, ax4], p3[ax0, ax1, 0, 0, ax4], p4[ax0, ax1, 0, 0, ax4])
                    T.writes(T_relu[ax0, ax1, ax2, ax3, ax4])
                    T_relu[ax0, ax1, ax2, ax3, ax4] = T.max((conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4] + p2[ax0, ax1, ax2, ax3, ax4]) * p3[ax0, ax1, 0, 0, ax4] + p4[ax0, ax1, 0, 0, ax4], T.float32(0))
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_multiply", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b0)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 8, 4, 2])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 8, 4, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[32, 16])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
2023-02-16 14:18:38 [INFO] [task_scheduler.cc:168] Design space #1:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 128, 7, 7, 4), "float32"], p1: T.Buffer[(64, 128, 1, 1, 4, 32), "float32"], p2: T.Buffer[(1, 64, 7, 7, 32), "float32"], p3: T.Buffer[(1, 64, 1, 1, 32), "float32"], p4: T.Buffer[(1, 64, 1, 1, 32), "float32"], T_relu: T.Buffer[(1, 64, 7, 7, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":64, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 64, 7, 7, 32], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0, i0_1, i1_1, i2_1, i3_1, i4_1 in T.grid(1, 1, 1, 1, 1, 1, 8, 1, 1, 8):
                for i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(32, 1, 1, 1, 4, 1, 7, 4, 16, 1, 1, 1, 2, 7, 1, 1):
                    with T.block("conv2d_NCHWc"):
                        n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                        oc_chunk = T.axis.spatial(64, i1_0 * 64 + i1_1 * 8 + i1_2 * 2 + i1_3)
                        oh = T.axis.spatial(7, i2_0 * 7 + i2_1 * 7 + i2_2 * 7 + i2_3)
                        ow = T.axis.spatial(7, i3_3 + i3_0 * 7 + i3_1 * 7 + i3_2)
                        oc_block = T.axis.spatial(32, i4_0 * 32 + i4_1 * 4 + i4_2 + i4_3)
                        ic = T.axis.reduce(512, i5_0 * 16 + i5_1)
                        kh = T.axis.reduce(1, i6_0 + i6_1)
                        kw = T.axis.reduce(1, i7_1 + i7_0)
                        T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                        T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                        T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(1, 8, 7, 7, 4):
                    with T.block("T_relu"):
                        ax0_1 = T.axis.spatial(1, ax0)
                        ax1_1 = T.axis.spatial(64, i1_1 * 8 + ax1)
                        ax2_1, ax3_1 = T.axis.remap("SS", [ax2, ax3])
                        ax4_1 = T.axis.spatial(32, i4_1 * 4 + ax4)
                        T.reads(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p3[ax0_1, ax1_1, 0, 0, ax4_1], p4[ax0_1, ax1_1, 0, 0, ax4_1])
                        T.writes(T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] = T.max((conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1]) * p3[ax0_1, ax1_1, 0, 0, ax4_1] + p4[ax0_1, ax1_1, 0, 0, ax4_1], T.float32(0))
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_multiply", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b0)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 8, 4, 2])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 8, 4, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[32, 16])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
2023-02-16 14:18:38 [INFO] [task_scheduler.cc:168] Design space #2:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 128, 7, 7, 4), "float32"], p1: T.Buffer[(64, 128, 1, 1, 4, 32), "float32"], p2: T.Buffer[(1, 64, 7, 7, 32), "float32"], p3: T.Buffer[(1, 64, 1, 1, 32), "float32"], p4: T.Buffer[(1, 64, 1, 1, 32), "float32"], T_relu: T.Buffer[(1, 64, 7, 7, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":512, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 64, 7, 7, 32], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0 in T.grid(1, 1, 1, 1, 1):
                for i0_1, i1_1, i2_1, i3_1, i4_1, i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(1, 8, 1, 1, 8, 32, 1, 1, 1, 4, 1, 7, 4, 16, 1, 1, 1, 2, 7, 1, 1):
                    with T.block("conv2d_NCHWc"):
                        n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                        oc_chunk = T.axis.spatial(64, i1_0 * 64 + i1_1 * 8 + i1_2 * 2 + i1_3)
                        oh = T.axis.spatial(7, i2_0 * 7 + i2_1 * 7 + i2_2 * 7 + i2_3)
                        ow = T.axis.spatial(7, i3_3 + i3_0 * 7 + i3_1 * 7 + i3_2)
                        oc_block = T.axis.spatial(32, i4_0 * 32 + i4_1 * 4 + i4_2 + i4_3)
                        ic = T.axis.reduce(512, i5_0 * 16 + i5_1)
                        kh = T.axis.reduce(1, i6_0 + i6_1)
                        kw = T.axis.reduce(1, i7_1 + i7_0)
                        T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                        T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                        T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(1, 64, 7, 7, 32):
                    with T.block("T_relu"):
                        ax0_1, ax1_1, ax2_1, ax3_1, ax4_1 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p3[ax0_1, ax1_1, 0, 0, ax4_1], p4[ax0_1, ax1_1, 0, 0, ax4_1])
                        T.writes(T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] = T.max((conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1]) * p3[ax0_1, ax1_1, 0, 0, ax4_1] + p4[ax0_1, ax1_1, 0, 0, ax4_1], T.float32(0))
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_multiply", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b0)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 8, 4, 2])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 8, 4, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[32, 16])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b65, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
2023-02-16 14:20:39 [INFO] [task_scheduler.cc:158] Initializing Task #53: "fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu"
2023-02-16 14:20:39 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 128, 7, 7, 4), "float32"], p1: T.Buffer[(64, 128, 1, 1, 4, 32), "float32"], p2: T.Buffer[(1, 64, 7, 7, 32), "float32"], p3: T.Buffer[(1, 64, 1, 1, 32), "float32"], p4: T.Buffer[(1, 64, 1, 1, 32), "float32"], T_relu: T.Buffer[(1, 64, 7, 7, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        conv2d_NCHWc = T.alloc_buffer([1, 64, 7, 7, 32], dtype="float32")
        T_add = T.alloc_buffer([1, 64, 7, 7, 32], dtype="float32")
        T_multiply = T.alloc_buffer([1, 64, 7, 7, 32], dtype="float32")
        T_add_1 = T.alloc_buffer([1, 64, 7, 7, 32], dtype="float32")
        for i0, i1, i2, i3, i4, i5, i6, i7 in T.grid(1, 64, 7, 7, 32, 512, 1, 1):
            with T.block("conv2d_NCHWc"):
                n, oc_chunk, oh, ow, oc_block, ic, kh, kw = T.axis.remap("SSSSSRRR", [i0, i1, i2, i3, i4, i5, i6, i7])
                T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                with T.init():
                    conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
        for i0, i1, i2, i3, i4 in T.grid(1, 64, 7, 7, 32):
            with T.block("T_add"):
                ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4], p2[ax0, ax1, ax2, ax3, ax4])
                T.writes(T_add[ax0, ax1, ax2, ax3, ax4])
                T_add[ax0, ax1, ax2, ax3, ax4] = conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4] + p2[ax0, ax1, ax2, ax3, ax4]
        for i0, i1, i2, i3, i4 in T.grid(1, 64, 7, 7, 32):
            with T.block("T_multiply"):
                ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(T_add[ax0, ax1, ax2, ax3, ax4], p3[ax0, ax1, 0, 0, ax4])
                T.writes(T_multiply[ax0, ax1, ax2, ax3, ax4])
                T_multiply[ax0, ax1, ax2, ax3, ax4] = T_add[ax0, ax1, ax2, ax3, ax4] * p3[ax0, ax1, 0, 0, ax4]
        for i0, i1, i2, i3, i4 in T.grid(1, 64, 7, 7, 32):
            with T.block("T_add_1"):
                ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(T_multiply[ax0, ax1, ax2, ax3, ax4], p4[ax0, ax1, 0, 0, ax4])
                T.writes(T_add_1[ax0, ax1, ax2, ax3, ax4])
                T_add_1[ax0, ax1, ax2, ax3, ax4] = T_multiply[ax0, ax1, ax2, ax3, ax4] + p4[ax0, ax1, 0, 0, ax4]
        for i0, i1, i2, i3, i4 in T.grid(1, 64, 7, 7, 32):
            with T.block("T_relu"):
                ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(T_add_1[ax0, ax1, ax2, ax3, ax4])
                T.writes(T_relu[ax0, ax1, ax2, ax3, ax4])
                T_relu[ax0, ax1, ax2, ax3, ax4] = T.max(T_add_1[ax0, ax1, ax2, ax3, ax4], T.float32(0))
    

2023-02-16 14:20:39 [INFO] [task_scheduler.cc:162] Total 3 design space(s) generated
2023-02-16 14:20:39 [INFO] [task_scheduler.cc:168] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 128, 7, 7, 4), "float32"], p1: T.Buffer[(64, 128, 1, 1, 4, 32), "float32"], p2: T.Buffer[(1, 64, 7, 7, 32), "float32"], p3: T.Buffer[(1, 64, 1, 1, 32), "float32"], p4: T.Buffer[(1, 64, 1, 1, 32), "float32"], T_relu: T.Buffer[(1, 64, 7, 7, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":64, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 64, 7, 7, 32], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0, i0_1, i1_1, i2_1, i3_1, i4_1, i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(1, 4, 1, 1, 2, 1, 8, 7, 1, 1, 8, 1, 1, 1, 2, 1, 7, 2, 64, 1, 1, 1, 1, 1, 1, 8):
                with T.block("conv2d_NCHWc"):
                    n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                    oc_chunk = T.axis.spatial(64, i1_3 + i1_0 * 16 + i1_1 * 2 + i1_2)
                    oh = T.axis.spatial(7, i2_0 * 7 + i2_1 + i2_2 + i2_3)
                    ow = T.axis.spatial(7, i3_3 + i3_0 * 7 + i3_1 * 7 + i3_2)
                    oc_block = T.axis.spatial(32, i4_0 * 16 + i4_1 * 16 + i4_2 * 8 + i4_3)
                    ic = T.axis.reduce(512, i5_0 * 64 + i5_1)
                    kh = T.axis.reduce(1, i6_0 + i6_1)
                    kw = T.axis.reduce(1, i7_1 + i7_0)
                    T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                    T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                    T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                    conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
            for i0, i1, i2, i3, i4 in T.grid(1, 64, 7, 7, 32):
                with T.block("T_relu"):
                    ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4], p2[ax0, ax1, ax2, ax3, ax4], p3[ax0, ax1, 0, 0, ax4], p4[ax0, ax1, 0, 0, ax4])
                    T.writes(T_relu[ax0, ax1, ax2, ax3, ax4])
                    T_relu[ax0, ax1, ax2, ax3, ax4] = T.max((conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4] + p2[ax0, ax1, ax2, ax3, ax4]) * p3[ax0, ax1, 0, 0, ax4] + p4[ax0, ax1, 0, 0, ax4], T.float32(0))
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_multiply", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b0)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 8, 2, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 1, 2, 8])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[8, 64])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
2023-02-16 14:20:39 [INFO] [task_scheduler.cc:168] Design space #1:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 128, 7, 7, 4), "float32"], p1: T.Buffer[(64, 128, 1, 1, 4, 32), "float32"], p2: T.Buffer[(1, 64, 7, 7, 32), "float32"], p3: T.Buffer[(1, 64, 1, 1, 32), "float32"], p4: T.Buffer[(1, 64, 1, 1, 32), "float32"], T_relu: T.Buffer[(1, 64, 7, 7, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":64, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 64, 7, 7, 32], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0, i0_1, i1_1, i2_1, i3_1, i4_1 in T.grid(1, 4, 1, 1, 2, 1, 8, 7, 1, 1):
                for i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(8, 1, 1, 1, 2, 1, 7, 2, 64, 1, 1, 1, 1, 1, 1, 8):
                    with T.block("conv2d_NCHWc"):
                        n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                        oc_chunk = T.axis.spatial(64, i1_3 + i1_0 * 16 + i1_1 * 2 + i1_2)
                        oh = T.axis.spatial(7, i2_0 * 7 + i2_1 + i2_2 + i2_3)
                        ow = T.axis.spatial(7, i3_3 + i3_0 * 7 + i3_1 * 7 + i3_2)
                        oc_block = T.axis.spatial(32, i4_0 * 16 + i4_1 * 16 + i4_2 * 8 + i4_3)
                        ic = T.axis.reduce(512, i5_0 * 64 + i5_1)
                        kh = T.axis.reduce(1, i6_0 + i6_1)
                        kw = T.axis.reduce(1, i7_1 + i7_0)
                        T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                        T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                        T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(1, 2, 1, 7, 16):
                    with T.block("T_relu"):
                        ax0_1 = T.axis.spatial(1, ax0)
                        ax1_1 = T.axis.spatial(64, i1_0 * 16 + i1_1 * 2 + ax1)
                        ax2_1 = T.axis.spatial(7, i2_1 + ax2)
                        ax3_1 = T.axis.spatial(7, ax3)
                        ax4_1 = T.axis.spatial(32, i4_0 * 16 + ax4)
                        T.reads(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p3[ax0_1, ax1_1, 0, 0, ax4_1], p4[ax0_1, ax1_1, 0, 0, ax4_1])
                        T.writes(T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] = T.max((conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1]) * p3[ax0_1, ax1_1, 0, 0, ax4_1] + p4[ax0_1, ax1_1, 0, 0, ax4_1], T.float32(0))
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_multiply", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b0)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 8, 2, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 1, 2, 8])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[8, 64])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
2023-02-16 14:20:39 [INFO] [task_scheduler.cc:168] Design space #2:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 128, 7, 7, 4), "float32"], p1: T.Buffer[(64, 128, 1, 1, 4, 32), "float32"], p2: T.Buffer[(1, 64, 7, 7, 32), "float32"], p3: T.Buffer[(1, 64, 1, 1, 32), "float32"], p4: T.Buffer[(1, 64, 1, 1, 32), "float32"], T_relu: T.Buffer[(1, 64, 7, 7, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":512, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 64, 7, 7, 32], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0 in T.grid(1, 4, 1, 1, 2):
                for i0_1, i1_1, i2_1, i3_1, i4_1, i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(1, 8, 7, 1, 1, 8, 1, 1, 1, 2, 1, 7, 2, 64, 1, 1, 1, 1, 1, 1, 8):
                    with T.block("conv2d_NCHWc"):
                        n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                        oc_chunk = T.axis.spatial(64, i1_3 + i1_0 * 16 + i1_1 * 2 + i1_2)
                        oh = T.axis.spatial(7, i2_0 * 7 + i2_1 + i2_2 + i2_3)
                        ow = T.axis.spatial(7, i3_3 + i3_0 * 7 + i3_1 * 7 + i3_2)
                        oc_block = T.axis.spatial(32, i4_0 * 16 + i4_1 * 16 + i4_2 * 8 + i4_3)
                        ic = T.axis.reduce(512, i5_0 * 64 + i5_1)
                        kh = T.axis.reduce(1, i6_0 + i6_1)
                        kw = T.axis.reduce(1, i7_1 + i7_0)
                        T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                        T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                        T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(1, 16, 7, 7, 16):
                    with T.block("T_relu"):
                        ax0_1 = T.axis.spatial(1, ax0)
                        ax1_1 = T.axis.spatial(64, i1_0 * 16 + ax1)
                        ax2_1, ax3_1 = T.axis.remap("SS", [ax2, ax3])
                        ax4_1 = T.axis.spatial(32, i4_0 * 16 + ax4)
                        T.reads(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p3[ax0_1, ax1_1, 0, 0, ax4_1], p4[ax0_1, ax1_1, 0, 0, ax4_1])
                        T.writes(T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T_relu[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] = T.max((conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1]) * p3[ax0_1, ax1_1, 0, 0, ax4_1] + p4[ax0_1, ax1_1, 0, 0, ax4_1], T.float32(0))
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_multiply", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b0)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 8, 2, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 1, 2, 8])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[8, 64])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b65, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
2023-02-16 15:29:33 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-02-16 15:29:33 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2023-02-16 15:29:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x41d6858)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x36a42428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x2e842778)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x78e7358)]: 0 failure(s)
2023-02-16 15:29:33 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2023-02-16 15:29:34 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x41d6858)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x36a42428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x2e842778)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x78e7358)]: 0 failure(s)
2023-02-16 15:29:35 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x41d6858)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x36a42428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x2e842778)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x78e7358)]: 0 failure(s)
2023-02-16 15:29:36 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x41d6858)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x36a42428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x2e842778)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x78e7358)]: 0 failure(s)
2023-02-16 15:29:37 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x41d6858)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x36a42428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x2e842778)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x78e7358)]: 0 failure(s)
2023-02-16 15:29:37 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9993  0.9992  0.9987  0.9986  0.9985  0.9977  0.9975  0.9972  0.9966  0.9956  0.9948  0.9939  0.9939  0.9930  0.9929
[17 : 32]:	0.9926  0.9923  0.9920  0.9912  0.9908  0.9906  0.9901  0.9890  0.9887  0.9881  0.9880  0.9875  0.9868  0.9867  0.9865  0.9864
[33 : 48]:	0.9852  0.9850  0.9849  0.9824  0.9817  0.9808  0.9805  0.9804  0.9799  0.9796  0.9789  0.9787  0.9773  0.9770  0.9768  0.9762
[49 : 64]:	0.9752  0.9750  0.9747  0.9747  0.9742  0.9740  0.9728  0.9722  0.9713  0.9712  0.9705  0.9704  0.9704  0.9701  0.9696  0.9693
2023-02-16 15:29:38 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-02-16 15:29:38 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #1: GFLOPs: 62.9917. Time: 1637.7067 us. Best GFLOPs: 62.9917
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #2: GFLOPs: 8.9641. Time: 11508.3272 us. Best GFLOPs: 62.9917
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #3: GFLOPs: 71.0537. Time: 1451.8859 us. Best GFLOPs: 71.0537
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #4: GFLOPs: 16.7958. Time: 6142.1144 us. Best GFLOPs: 71.0537
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #5: GFLOPs: 19.9524. Time: 5170.3946 us. Best GFLOPs: 71.0537
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #6: GFLOPs: 23.9441. Time: 4308.4529 us. Best GFLOPs: 71.0537
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #7: GFLOPs: 58.4472. Time: 1765.0441 us. Best GFLOPs: 71.0537
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #8: GFLOPs: 20.4975. Time: 5032.9081 us. Best GFLOPs: 71.0537
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #9: GFLOPs: 89.7186. Time: 1149.8381 us. Best GFLOPs: 89.7186
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #10: GFLOPs: 12.6996. Time: 8123.2531 us. Best GFLOPs: 89.7186
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #11: GFLOPs: 2.1810. Time: 47300.8068 us. Best GFLOPs: 89.7186
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #12: GFLOPs: 44.7869. Time: 2303.3942 us. Best GFLOPs: 89.7186
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #13: GFLOPs: 33.7637. Time: 3055.4094 us. Best GFLOPs: 89.7186
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #14: GFLOPs: 37.4615. Time: 2753.8107 us. Best GFLOPs: 89.7186
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #15: GFLOPs: 46.7385. Time: 2207.2136 us. Best GFLOPs: 89.7186
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #16: GFLOPs: 106.1355. Time: 971.9827 us. Best GFLOPs: 106.1355
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #17: GFLOPs: 33.4153. Time: 3087.2630 us. Best GFLOPs: 106.1355
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #18: GFLOPs: 10.0347. Time: 10280.5491 us. Best GFLOPs: 106.1355
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #19: GFLOPs: 85.9779. Time: 1199.8647 us. Best GFLOPs: 106.1355
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #20: GFLOPs: 42.0305. Time: 2454.4505 us. Best GFLOPs: 106.1355
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #21: GFLOPs: 37.4183. Time: 2756.9900 us. Best GFLOPs: 106.1355
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #22: GFLOPs: 20.3283. Time: 5074.7914 us. Best GFLOPs: 106.1355
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #23: GFLOPs: 4.0602. Time: 25407.9619 us. Best GFLOPs: 106.1355
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #24: GFLOPs: 15.5240. Time: 6645.3020 us. Best GFLOPs: 106.1355
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #25: GFLOPs: 0.3448. Time: 299202.2165 us. Best GFLOPs: 106.1355
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #26: GFLOPs: 115.4607. Time: 893.4805 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #27: GFLOPs: 33.0750. Time: 3119.0269 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #28: GFLOPs: 59.1799. Time: 1743.1896 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #29: GFLOPs: 2.1459. Time: 48073.8743 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #30: GFLOPs: 5.0260. Time: 20525.7551 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #31: GFLOPs: 56.5029. Time: 1825.7813 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #32: GFLOPs: 18.4166. Time: 5601.5589 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #33: GFLOPs: 71.3193. Time: 1446.4797 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #34: GFLOPs: 81.4929. Time: 1265.8994 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #35: GFLOPs: 19.1519. Time: 5386.4987 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #36: GFLOPs: 24.3927. Time: 4229.2152 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #37: GFLOPs: 14.6017. Time: 7065.0588 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #38: GFLOPs: 19.7876. Time: 5213.4599 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #39: GFLOPs: 22.3180. Time: 4622.3683 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #40: GFLOPs: 37.1790. Time: 2774.7346 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #41: GFLOPs: 15.0831. Time: 6839.5856 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #42: GFLOPs: 48.5874. Time: 2123.2240 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #43: GFLOPs: 14.6955. Time: 7019.9436 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #44: GFLOPs: 71.8030. Time: 1436.7336 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #45: GFLOPs: 14.3379. Time: 7195.0458 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #46: GFLOPs: 12.8178. Time: 8048.3268 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #47: GFLOPs: 44.8850. Time: 2298.3616 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #48: GFLOPs: 81.7132. Time: 1262.4864 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #49: GFLOPs: 18.7144. Time: 5512.4236 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #50: GFLOPs: 7.8709. Time: 13106.8098 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #51: GFLOPs: 40.6350. Time: 2538.7451 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #52: GFLOPs: 71.9343. Time: 1434.1112 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #53: GFLOPs: 34.0516. Time: 3029.5786 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #54: GFLOPs: 22.0157. Time: 4685.8296 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #55: GFLOPs: 37.3629. Time: 2761.0737 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #56: GFLOPs: 19.7137. Time: 5233.0001 us. Best GFLOPs: 115.4607
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #57: GFLOPs: 171.6186. Time: 601.1113 us. Best GFLOPs: 171.6186
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #58: GFLOPs: 10.9949. Time: 9382.6619 us. Best GFLOPs: 171.6186
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #59: GFLOPs: 82.1977. Time: 1255.0456 us. Best GFLOPs: 171.6186
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #60: GFLOPs: 6.8213. Time: 15123.4754 us. Best GFLOPs: 171.6186
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #61: GFLOPs: 6.4860. Time: 15905.3271 us. Best GFLOPs: 171.6186
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #62: GFLOPs: 25.8105. Time: 3996.8908 us. Best GFLOPs: 171.6186
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #63: GFLOPs: 3.5850. Time: 28775.7055 us. Best GFLOPs: 171.6186
2023-02-16 15:36:42 [INFO] [task_scheduler.cc:129] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu] Trial #64: GFLOPs: 11.6894. Time: 8825.2828 us. Best GFLOPs: 171.6186
