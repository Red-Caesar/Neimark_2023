2023-02-16 14:18:37 [INFO] [task_scheduler.cc:158] Initializing Task #25: "fused_nn_contrib_conv2d_NCHWc_add_1"
2023-02-16 14:18:37 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 32, 28, 28, 4), "float32"], p1: T.Buffer[(16, 32, 1, 1, 4, 32), "float32"], p2: T.Buffer[(1, 16, 28, 28, 32), "float32"], T_add: T.Buffer[(1, 16, 28, 28, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        conv2d_NCHWc = T.alloc_buffer([1, 16, 28, 28, 32], dtype="float32")
        for i0, i1, i2, i3, i4, i5, i6, i7 in T.grid(1, 16, 28, 28, 32, 128, 1, 1):
            with T.block("conv2d_NCHWc"):
                n, oc_chunk, oh, ow, oc_block, ic, kh, kw = T.axis.remap("SSSSSRRR", [i0, i1, i2, i3, i4, i5, i6, i7])
                T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                with T.init():
                    conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
        for i0, i1, i2, i3, i4 in T.grid(1, 16, 28, 28, 32):
            with T.block("T_add"):
                ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4], p2[ax0, ax1, ax2, ax3, ax4])
                T.writes(T_add[ax0, ax1, ax2, ax3, ax4])
                T_add[ax0, ax1, ax2, ax3, ax4] = conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4] + p2[ax0, ax1, ax2, ax3, ax4]
    

2023-02-16 14:18:37 [INFO] [task_scheduler.cc:162] Total 3 design space(s) generated
2023-02-16 14:18:37 [INFO] [task_scheduler.cc:168] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 32, 28, 28, 4), "float32"], p1: T.Buffer[(16, 32, 1, 1, 4, 32), "float32"], p2: T.Buffer[(1, 16, 28, 28, 32), "float32"], T_add: T.Buffer[(1, 16, 28, 28, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":16, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 16, 28, 28, 32], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0, i0_1, i1_1, i2_1, i3_1, i4_1, i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(1, 1, 7, 2, 8, 1, 1, 1, 7, 4, 64, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 8, 4, 2, 1):
                with T.block("conv2d_NCHWc"):
                    n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                    oc_chunk = T.axis.spatial(16, i1_0 * 16 + i1_1 * 16 + i1_2 * 8 + i1_3)
                    oh = T.axis.spatial(28, i2_0 * 4 + i2_1 * 4 + i2_2 * 4 + i2_3)
                    ow = T.axis.spatial(28, i3_0 * 14 + i3_1 * 2 + i3_2 * 2 + i3_3)
                    oc_block = T.axis.spatial(32, i4_2 + i4_3 + i4_0 * 4 + i4_1)
                    ic = T.axis.reduce(128, i5_0 * 2 + i5_1)
                    kh = T.axis.reduce(1, i6_0 + i6_1)
                    kw = T.axis.reduce(1, i7_1 + i7_0)
                    T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                    T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                    T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                    conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
            for i0, i1, i2, i3, i4 in T.grid(1, 16, 28, 28, 32):
                with T.block("T_add"):
                    ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4], p2[ax0, ax1, ax2, ax3, ax4])
                    T.writes(T_add[ax0, ax1, ax2, ax3, ax4])
                    T_add[ax0, ax1, ax2, ax3, ax4] = conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4] + p2[ax0, ax1, ax2, ax3, ax4]
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 2, 8])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[7, 1, 1, 4])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 2])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[8, 4, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[64, 2])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v62 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v62)
2023-02-16 14:18:37 [INFO] [task_scheduler.cc:168] Design space #1:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 32, 28, 28, 4), "float32"], p1: T.Buffer[(16, 32, 1, 1, 4, 32), "float32"], p2: T.Buffer[(1, 16, 28, 28, 32), "float32"], T_add: T.Buffer[(1, 16, 28, 28, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":64, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 16, 28, 28, 32], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0, i0_1, i1_1, i2_1, i3_1, i4_1 in T.grid(1, 1, 7, 2, 8, 1, 1, 1, 7, 4):
                for i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(64, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 8, 4, 2, 1):
                    with T.block("conv2d_NCHWc"):
                        n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                        oc_chunk = T.axis.spatial(16, i1_0 * 16 + i1_1 * 16 + i1_2 * 8 + i1_3)
                        oh = T.axis.spatial(28, i2_0 * 4 + i2_1 * 4 + i2_2 * 4 + i2_3)
                        ow = T.axis.spatial(28, i3_0 * 14 + i3_1 * 2 + i3_2 * 2 + i3_3)
                        oc_block = T.axis.spatial(32, i4_2 + i4_3 + i4_0 * 4 + i4_1)
                        ic = T.axis.reduce(128, i5_0 * 2 + i5_1)
                        kh = T.axis.reduce(1, i6_0 + i6_1)
                        kw = T.axis.reduce(1, i7_1 + i7_0)
                        T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                        T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                        T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(1, 16, 4, 2, 1):
                    with T.block("T_add"):
                        ax0_1, ax1_1 = T.axis.remap("SS", [ax0, ax1])
                        ax2_1 = T.axis.spatial(28, i2_0 * 4 + ax2)
                        ax3_1 = T.axis.spatial(28, i3_0 * 14 + i3_1 * 2 + ax3)
                        ax4_1 = T.axis.spatial(32, i4_0 * 4 + i4_1 + ax4)
                        T.reads(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T.writes(T_add[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T_add[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] = conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1]
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 2, 8])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[7, 1, 1, 4])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 2])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[8, 4, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[64, 2])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2023-02-16 14:18:37 [INFO] [task_scheduler.cc:168] Design space #2:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 32, 28, 28, 4), "float32"], p1: T.Buffer[(16, 32, 1, 1, 4, 32), "float32"], p2: T.Buffer[(1, 16, 28, 28, 32), "float32"], T_add: T.Buffer[(1, 16, 28, 28, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":16, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 16, 28, 28, 32], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0 in T.grid(1, 1, 7, 2, 8):
                for i0_1, i1_1, i2_1, i3_1, i4_1, i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(1, 1, 1, 7, 4, 64, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 8, 4, 2, 1):
                    with T.block("conv2d_NCHWc"):
                        n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                        oc_chunk = T.axis.spatial(16, i1_0 * 16 + i1_1 * 16 + i1_2 * 8 + i1_3)
                        oh = T.axis.spatial(28, i2_0 * 4 + i2_1 * 4 + i2_2 * 4 + i2_3)
                        ow = T.axis.spatial(28, i3_0 * 14 + i3_1 * 2 + i3_2 * 2 + i3_3)
                        oc_block = T.axis.spatial(32, i4_2 + i4_3 + i4_0 * 4 + i4_1)
                        ic = T.axis.reduce(128, i5_0 * 2 + i5_1)
                        kh = T.axis.reduce(1, i6_0 + i6_1)
                        kw = T.axis.reduce(1, i7_1 + i7_0)
                        T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                        T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                        T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(1, 16, 4, 14, 4):
                    with T.block("T_add"):
                        ax0_1, ax1_1 = T.axis.remap("SS", [ax0, ax1])
                        ax2_1 = T.axis.spatial(28, i2_0 * 4 + ax2)
                        ax3_1 = T.axis.spatial(28, i3_0 * 14 + ax3)
                        ax4_1 = T.axis.spatial(32, i4_0 * 4 + ax4)
                        T.reads(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T.writes(T_add[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T_add[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] = conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1]
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 2, 8])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[7, 1, 1, 4])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 2])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[8, 4, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[64, 2])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2023-02-16 14:20:37 [INFO] [task_scheduler.cc:158] Initializing Task #25: "fused_nn_contrib_conv2d_NCHWc_add_1"
2023-02-16 14:20:37 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 32, 28, 28, 4), "float32"], p1: T.Buffer[(16, 32, 1, 1, 4, 32), "float32"], p2: T.Buffer[(1, 16, 28, 28, 32), "float32"], T_add: T.Buffer[(1, 16, 28, 28, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        conv2d_NCHWc = T.alloc_buffer([1, 16, 28, 28, 32], dtype="float32")
        for i0, i1, i2, i3, i4, i5, i6, i7 in T.grid(1, 16, 28, 28, 32, 128, 1, 1):
            with T.block("conv2d_NCHWc"):
                n, oc_chunk, oh, ow, oc_block, ic, kh, kw = T.axis.remap("SSSSSRRR", [i0, i1, i2, i3, i4, i5, i6, i7])
                T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                with T.init():
                    conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
        for i0, i1, i2, i3, i4 in T.grid(1, 16, 28, 28, 32):
            with T.block("T_add"):
                ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4], p2[ax0, ax1, ax2, ax3, ax4])
                T.writes(T_add[ax0, ax1, ax2, ax3, ax4])
                T_add[ax0, ax1, ax2, ax3, ax4] = conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4] + p2[ax0, ax1, ax2, ax3, ax4]
    

2023-02-16 14:20:37 [INFO] [task_scheduler.cc:162] Total 3 design space(s) generated
2023-02-16 14:20:37 [INFO] [task_scheduler.cc:168] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 32, 28, 28, 4), "float32"], p1: T.Buffer[(16, 32, 1, 1, 4, 32), "float32"], p2: T.Buffer[(1, 16, 28, 28, 32), "float32"], T_add: T.Buffer[(1, 16, 28, 28, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":16, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 16, 28, 28, 32], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0, i0_1, i1_1, i2_1, i3_1, i4_1, i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(1, 8, 7, 1, 8, 1, 2, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 64, 1, 1, 1, 1, 1, 28, 2):
                with T.block("conv2d_NCHWc"):
                    n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                    oc_chunk = T.axis.spatial(16, i1_2 + i1_3 + i1_0 * 2 + i1_1)
                    oh = T.axis.spatial(28, i2_0 * 4 + i2_1 * 2 + i2_2 + i2_3)
                    ow = T.axis.spatial(28, i3_0 * 28 + i3_1 * 28 + i3_2 * 28 + i3_3)
                    oc_block = T.axis.spatial(32, i4_0 * 4 + i4_1 * 2 + i4_2 * 2 + i4_3)
                    ic = T.axis.reduce(128, i5_0 * 64 + i5_1)
                    kh = T.axis.reduce(1, i6_0 + i6_1)
                    kw = T.axis.reduce(1, i7_1 + i7_0)
                    T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                    T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                    T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                    conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
            for i0, i1, i2, i3, i4 in T.grid(1, 16, 28, 28, 32):
                with T.block("T_add"):
                    ax0, ax1, ax2, ax3, ax4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4], p2[ax0, ax1, ax2, ax3, ax4])
                    T.writes(T_add[ax0, ax1, ax2, ax3, ax4])
                    T_add[ax0, ax1, ax2, ax3, ax4] = conv2d_NCHWc[ax0, ax1, ax2, ax3, ax4] + p2[ax0, ax1, ax2, ax3, ax4]
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[8, 2, 1, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[7, 2, 2, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 28])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[8, 2, 1, 2])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[2, 64])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v62 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v62)
2023-02-16 14:20:37 [INFO] [task_scheduler.cc:168] Design space #1:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 32, 28, 28, 4), "float32"], p1: T.Buffer[(16, 32, 1, 1, 4, 32), "float32"], p2: T.Buffer[(1, 16, 28, 28, 32), "float32"], T_add: T.Buffer[(1, 16, 28, 28, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":512, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 16, 28, 28, 32], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0, i0_1, i1_1, i2_1, i3_1, i4_1 in T.grid(1, 8, 7, 1, 8, 1, 2, 2, 1, 2):
                for i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(2, 1, 1, 1, 1, 2, 1, 1, 64, 1, 1, 1, 1, 1, 28, 2):
                    with T.block("conv2d_NCHWc"):
                        n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                        oc_chunk = T.axis.spatial(16, i1_2 + i1_3 + i1_0 * 2 + i1_1)
                        oh = T.axis.spatial(28, i2_0 * 4 + i2_1 * 2 + i2_2 + i2_3)
                        ow = T.axis.spatial(28, i3_0 * 28 + i3_1 * 28 + i3_2 * 28 + i3_3)
                        oc_block = T.axis.spatial(32, i4_0 * 4 + i4_1 * 2 + i4_2 * 2 + i4_3)
                        ic = T.axis.reduce(128, i5_0 * 64 + i5_1)
                        kh = T.axis.reduce(1, i6_0 + i6_1)
                        kw = T.axis.reduce(1, i7_1 + i7_0)
                        T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                        T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                        T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(1, 1, 2, 28, 2):
                    with T.block("T_add"):
                        ax0_1 = T.axis.spatial(1, ax0)
                        ax1_1 = T.axis.spatial(16, i1_0 * 2 + i1_1 + ax1)
                        ax2_1 = T.axis.spatial(28, i2_0 * 4 + i2_1 * 2 + ax2)
                        ax3_1 = T.axis.spatial(28, ax3)
                        ax4_1 = T.axis.spatial(32, i4_0 * 4 + i4_1 * 2 + ax4)
                        T.reads(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T.writes(T_add[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T_add[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] = conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1]
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[8, 2, 1, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[7, 2, 2, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 28])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[8, 2, 1, 2])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[2, 64])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2023-02-16 14:20:37 [INFO] [task_scheduler.cc:168] Design space #2:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 32, 28, 28, 4), "float32"], p1: T.Buffer[(16, 32, 1, 1, 4, 32), "float32"], p2: T.Buffer[(1, 16, 28, 28, 32), "float32"], T_add: T.Buffer[(1, 16, 28, 28, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":16, "meta_schedule.vectorize":64})
            conv2d_NCHWc = T.alloc_buffer([1, 16, 28, 28, 32], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0 in T.grid(1, 8, 7, 1, 8):
                for i0_1, i1_1, i2_1, i3_1, i4_1, i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(1, 2, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 64, 1, 1, 1, 1, 1, 28, 2):
                    with T.block("conv2d_NCHWc"):
                        n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                        oc_chunk = T.axis.spatial(16, i1_2 + i1_3 + i1_0 * 2 + i1_1)
                        oh = T.axis.spatial(28, i2_0 * 4 + i2_1 * 2 + i2_2 + i2_3)
                        ow = T.axis.spatial(28, i3_0 * 28 + i3_1 * 28 + i3_2 * 28 + i3_3)
                        oc_block = T.axis.spatial(32, i4_0 * 4 + i4_1 * 2 + i4_2 * 2 + i4_3)
                        ic = T.axis.reduce(128, i5_0 * 64 + i5_1)
                        kh = T.axis.reduce(1, i6_0 + i6_1)
                        kw = T.axis.reduce(1, i7_1 + i7_0)
                        T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                        T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                        T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(1, 2, 4, 28, 4):
                    with T.block("T_add"):
                        ax0_1 = T.axis.spatial(1, ax0)
                        ax1_1 = T.axis.spatial(16, i1_0 * 2 + ax1)
                        ax2_1 = T.axis.spatial(28, i2_0 * 4 + ax2)
                        ax3_1 = T.axis.spatial(28, ax3)
                        ax4_1 = T.axis.spatial(32, i4_0 * 4 + ax4)
                        T.reads(conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1], p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T.writes(T_add[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1])
                        T_add[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] = conv2d_NCHWc[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1] + p2[ax0_1, ax1_1, ax2_1, ax3_1, ax4_1]
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[8, 2, 1, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[7, 2, 2, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 28])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[8, 2, 1, 2])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[2, 64])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2023-02-16 14:52:51 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-02-16 14:52:51 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2023-02-16 14:52:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35917238)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x352c5358)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4212ba8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x2127b968)]: 0 failure(s)
2023-02-16 14:52:51 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2023-02-16 14:52:52 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35917238)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x352c5358)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4212ba8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x2127b968)]: 0 failure(s)
2023-02-16 14:52:53 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35917238)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x352c5358)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4212ba8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x2127b968)]: 0 failure(s)
2023-02-16 14:52:54 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35917238)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x352c5358)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4212ba8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x2127b968)]: 0 failure(s)
2023-02-16 14:52:55 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35917238)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x352c5358)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4212ba8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x2127b968)]: 0 failure(s)
2023-02-16 14:52:55 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9985  0.9979  0.9977  0.9972  0.9961  0.9960  0.9958  0.9957  0.9953  0.9950  0.9945  0.9945  0.9937  0.9928  0.9909
[17 : 32]:	0.9907  0.9903  0.9897  0.9880  0.9875  0.9871  0.9870  0.9859  0.9858  0.9848  0.9843  0.9836  0.9834  0.9831  0.9822  0.9821
[33 : 48]:	0.9819  0.9818  0.9808  0.9807  0.9803  0.9797  0.9796  0.9792  0.9787  0.9786  0.9784  0.9778  0.9769  0.9767  0.9765  0.9748
[49 : 64]:	0.9745  0.9734  0.9734  0.9724  0.9717  0.9703  0.9702  0.9696  0.9693  0.9687  0.9685  0.9676  0.9667  0.9666  0.9658  0.9657
2023-02-16 14:52:55 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-02-16 14:52:55 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #1: GFLOPs: 37.6552. Time: 2739.6454 us. Best GFLOPs: 37.6552
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #2: GFLOPs: 182.6636. Time: 564.7640 us. Best GFLOPs: 182.6636
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #3: GFLOPs: 40.2645. Time: 2562.1066 us. Best GFLOPs: 182.6636
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #4: GFLOPs: 44.6914. Time: 2308.3159 us. Best GFLOPs: 182.6636
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #5: GFLOPs: 104.6565. Time: 985.7186 us. Best GFLOPs: 182.6636
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #6: GFLOPs: 37.3958. Time: 2758.6487 us. Best GFLOPs: 182.6636
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #7: GFLOPs: 9.9136. Time: 10406.1370 us. Best GFLOPs: 182.6636
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #8: GFLOPs: 29.9659. Time: 3442.6465 us. Best GFLOPs: 182.6636
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #9: GFLOPs: 68.0058. Time: 1516.9563 us. Best GFLOPs: 182.6636
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #10: GFLOPs: 60.4474. Time: 1706.6383 us. Best GFLOPs: 182.6636
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #11: GFLOPs: 82.7890. Time: 1246.0823 us. Best GFLOPs: 182.6636
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #12: GFLOPs: 35.6706. Time: 2892.0703 us. Best GFLOPs: 182.6636
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #13: GFLOPs: 17.0248. Time: 6059.4946 us. Best GFLOPs: 182.6636
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #14: GFLOPs: 19.9559. Time: 5169.5021 us. Best GFLOPs: 182.6636
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #15: GFLOPs: 15.0956. Time: 6833.9037 us. Best GFLOPs: 182.6636
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #16: GFLOPs: 261.9515. Time: 393.8205 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #17: GFLOPs: 17.0326. Time: 6056.7470 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #18: GFLOPs: 23.6654. Time: 4359.1792 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #19: GFLOPs: 28.5524. Time: 3613.0728 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #20: GFLOPs: 50.7181. Time: 2034.0236 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #21: GFLOPs: 28.5931. Time: 3607.9234 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #22: GFLOPs: 46.2288. Time: 2231.5516 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #23: GFLOPs: 12.6066. Time: 8183.1489 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #24: GFLOPs: 46.6738. Time: 2210.2737 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #25: GFLOPs: 55.1148. Time: 1871.7644 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #26: GFLOPs: 21.5624. Time: 4784.3490 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #27: GFLOPs: 186.0976. Time: 554.3426 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #28: GFLOPs: 7.9068. Time: 13047.2341 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #29: GFLOPs: 34.0206. Time: 3032.3314 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #30: GFLOPs: 39.1314. Time: 2636.2960 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #31: GFLOPs: 106.6583. Time: 967.2186 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #32: GFLOPs: 144.0597. Time: 716.1051 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #33: GFLOPs: 92.1197. Time: 1119.8680 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #34: GFLOPs: 9.5394. Time: 10814.3408 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #35: GFLOPs: 43.9494. Time: 2347.2875 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #36: GFLOPs: 37.9515. Time: 2718.2536 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #37: GFLOPs: 21.7642. Time: 4739.9747 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #38: GFLOPs: 10.4147. Time: 9905.4264 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #39: GFLOPs: 29.0141. Time: 3555.5711 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #40: GFLOPs: 172.4025. Time: 598.3781 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #41: GFLOPs: 23.7093. Time: 4351.1199 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #42: GFLOPs: 24.7123. Time: 4174.5070 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #43: GFLOPs: 30.9399. Time: 3334.2638 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #44: GFLOPs: 121.2599. Time: 850.7498 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #45: GFLOPs: 64.1458. Time: 1608.2413 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #46: GFLOPs: 22.4635. Time: 4592.4273 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #47: GFLOPs: 31.9472. Time: 3229.1395 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #48: GFLOPs: 33.7764. Time: 3054.2556 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #49: GFLOPs: 8.0791. Time: 12768.9872 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #50: GFLOPs: 29.2835. Time: 3522.8640 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #51: GFLOPs: 86.9603. Time: 1186.3102 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #52: GFLOPs: 185.9969. Time: 554.6428 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #53: GFLOPs: 99.3352. Time: 1038.5229 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #54: GFLOPs: 165.1319. Time: 624.7238 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #55: GFLOPs: 8.0815. Time: 12765.1429 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #56: GFLOPs: 30.8232. Time: 3346.8865 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #57: GFLOPs: 82.0794. Time: 1256.8538 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #58: GFLOPs: 26.1009. Time: 3952.4216 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #59: GFLOPs: 115.8916. Time: 890.1584 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #60: GFLOPs: 27.5299. Time: 3747.2659 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #61: GFLOPs: 27.7056. Time: 3723.4972 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #62: GFLOPs: 29.8476. Time: 3456.2871 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #63: GFLOPs: 82.9846. Time: 1243.1443 us. Best GFLOPs: 261.9515
2023-02-16 15:36:28 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #64: GFLOPs: 121.3260. Time: 850.2862 us. Best GFLOPs: 261.9515
2023-02-16 16:28:55 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-02-16 16:28:55 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2023-02-16 16:28:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35917238)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x352c5358)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4212ba8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x2127b968)]: 0 failure(s)
2023-02-16 16:28:56 [INFO] [evolutionary_search.cc:723] Sampled 448 candidate(s)
2023-02-16 16:28:58 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35917238)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x352c5358)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4212ba8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x2127b968)]: 0 failure(s)
2023-02-16 16:29:00 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35917238)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x352c5358)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4212ba8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x2127b968)]: 0 failure(s)
2023-02-16 16:29:02 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35917238)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x352c5358)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4212ba8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x2127b968)]: 0 failure(s)
2023-02-16 16:29:04 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35917238)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x352c5358)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4212ba8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x2127b968)]: 0 failure(s)
2023-02-16 16:29:06 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9447  0.9336  0.9178  0.9174  0.9142  0.9131  0.9076  0.8933  0.8933  0.8909  0.8880  0.8841  0.8799  0.8701  0.8685  0.8673
[17 : 32]:	0.8633  0.8629  0.8578  0.8541  0.8303  0.8242  0.8119  0.7836  0.7817  0.7776  0.7726  0.7700  0.7700  0.7645  0.7627  0.7617
[33 : 48]:	0.7616  0.7574  0.7574  0.7554  0.7537  0.7526  0.7491  0.7468  0.7451  0.7450  0.7446  0.7432  0.7380  0.7360  0.7349  0.7349
[49 : 64]:	0.7347  0.7341  0.7335  0.7326  0.7324  0.7311  0.7310  0.7282  0.7270  0.7246  0.7226  0.7223  0.7207  0.7206  0.7169  0.7145
2023-02-16 16:29:06 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-02-16 16:29:06 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #65: GFLOPs: 185.9929. Time: 554.6548 us. Best GFLOPs: 261.9515
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #66: GFLOPs: 249.4894. Time: 413.4919 us. Best GFLOPs: 261.9515
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #67: GFLOPs: 208.4690. Time: 494.8546 us. Best GFLOPs: 261.9515
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #68: GFLOPs: 133.2524. Time: 774.1841 us. Best GFLOPs: 261.9515
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #69: GFLOPs: 212.7658. Time: 484.8610 us. Best GFLOPs: 261.9515
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #70: GFLOPs: 139.1366. Time: 741.4431 us. Best GFLOPs: 261.9515
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #71: GFLOPs: 217.7112. Time: 473.8473 us. Best GFLOPs: 261.9515
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #72: GFLOPs: 223.6586. Time: 461.2470 us. Best GFLOPs: 261.9515
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #73: GFLOPs: 220.8967. Time: 467.0141 us. Best GFLOPs: 261.9515
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #74: GFLOPs: 256.0449. Time: 402.9053 us. Best GFLOPs: 261.9515
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #75: GFLOPs: 270.1751. Time: 381.8333 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #76: GFLOPs: 264.7229. Time: 389.6976 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #77: GFLOPs: 138.2667. Time: 746.1080 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #78: GFLOPs: 165.7743. Time: 622.3031 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #79: GFLOPs: 240.3625. Time: 429.1928 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #80: GFLOPs: 131.9922. Time: 781.5756 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #81: GFLOPs: 227.7220. Time: 453.0166 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #82: GFLOPs: 242.6712. Time: 425.1096 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #83: GFLOPs: 178.0511. Time: 579.3947 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #84: GFLOPs: 155.0572. Time: 665.3146 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #85: GFLOPs: 255.6829. Time: 403.4758 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #86: GFLOPs: 134.6873. Time: 765.9361 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #87: GFLOPs: 160.7756. Time: 641.6511 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #88: GFLOPs: 193.6157. Time: 532.8175 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #89: GFLOPs: 227.9008. Time: 452.6612 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #90: GFLOPs: 248.2173. Time: 415.6110 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #91: GFLOPs: 86.2466. Time: 1196.1271 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #92: GFLOPs: 212.2140. Time: 486.1219 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #93: GFLOPs: 219.0608. Time: 470.9279 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #94: GFLOPs: 268.5725. Time: 384.1118 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #95: GFLOPs: 115.1662. Time: 895.7652 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #96: GFLOPs: 263.8568. Time: 390.9766 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #97: GFLOPs: 150.4917. Time: 685.4987 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #98: GFLOPs: 68.3165. Time: 1510.0586 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #99: GFLOPs: 231.6124. Time: 445.4074 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #100: GFLOPs: 187.9930. Time: 548.7537 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #101: GFLOPs: 238.0425. Time: 433.3759 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #102: GFLOPs: 141.9429. Time: 726.7839 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #103: GFLOPs: 123.6187. Time: 834.5169 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #104: GFLOPs: 64.4597. Time: 1600.4084 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #105: GFLOPs: 89.3237. Time: 1154.9217 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #106: GFLOPs: 188.0531. Time: 548.5783 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #107: GFLOPs: 95.3261. Time: 1082.1995 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #108: GFLOPs: 51.8237. Time: 1990.6300 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #109: GFLOPs: 168.1335. Time: 613.5709 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #110: GFLOPs: 197.1210. Time: 523.3429 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #111: GFLOPs: 239.1463. Time: 431.3756 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #112: GFLOPs: 41.9119. Time: 2461.3993 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #113: GFLOPs: 175.5488. Time: 587.6535 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #114: GFLOPs: 158.9023. Time: 649.2155 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #115: GFLOPs: 166.7596. Time: 618.6261 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #116: GFLOPs: 70.1540. Time: 1470.5055 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #117: GFLOPs: 190.0636. Time: 542.7756 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #118: GFLOPs: 225.0661. Time: 458.3625 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #119: GFLOPs: 108.5232. Time: 950.5974 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #120: GFLOPs: 84.3183. Time: 1223.4818 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #121: GFLOPs: 101.7582. Time: 1013.7943 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #122: GFLOPs: 142.7754. Time: 722.5466 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #123: GFLOPs: 135.3067. Time: 762.4296 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #124: GFLOPs: 81.4418. Time: 1266.6942 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #125: GFLOPs: 131.3371. Time: 785.4737 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #126: GFLOPs: 67.7478. Time: 1522.7337 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #127: GFLOPs: 54.0825. Time: 1907.4905 us. Best GFLOPs: 270.1751
2023-02-16 16:31:14 [INFO] [task_scheduler.cc:129] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #128: GFLOPs: 17.2698. Time: 5973.5321 us. Best GFLOPs: 270.1751
