2023-02-16 14:18:36 [INFO] [task_scheduler.cc:158] Initializing Task #7: "fused_nn_contrib_conv2d_NCHWc_3"
2023-02-16 14:18:36 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 16, 56, 56, 4), "float32"], p1: T.Buffer[(8, 16, 1, 1, 4, 32), "float32"], conv2d_NCHWc: T.Buffer[(1, 8, 56, 56, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        for i0, i1, i2, i3, i4, i5, i6, i7 in T.grid(1, 8, 56, 56, 32, 64, 1, 1):
            with T.block("conv2d_NCHWc"):
                n, oc_chunk, oh, ow, oc_block, ic, kh, kw = T.axis.remap("SSSSSRRR", [i0, i1, i2, i3, i4, i5, i6, i7])
                T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                with T.init():
                    conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
    

2023-02-16 14:18:36 [INFO] [task_scheduler.cc:162] Total 3 design space(s) generated
2023-02-16 14:18:36 [INFO] [task_scheduler.cc:168] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 16, 56, 56, 4), "float32"], p1: T.Buffer[(8, 16, 1, 1, 4, 32), "float32"], conv2d_NCHWc: T.Buffer[(1, 8, 56, 56, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":64, "meta_schedule.vectorize":64})
            conv2d_NCHWc_global = T.alloc_buffer([1, 8, 56, 56, 32], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0, i0_1, i1_1, i2_1, i3_1, i4_1 in T.grid(1, 1, 7, 1, 32, 1, 4, 8, 56, 1):
                for i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(4, 1, 1, 1, 2, 1, 1, 1, 16, 1, 1, 1, 1, 1, 1, 1):
                    with T.block("conv2d_NCHWc"):
                        n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                        oc_chunk = T.axis.spatial(8, i1_3 + i1_0 * 8 + i1_1 * 2 + i1_2)
                        oh = T.axis.spatial(56, i2_0 * 8 + i2_1 + i2_2 + i2_3)
                        ow = T.axis.spatial(56, i3_3 + i3_0 * 56 + i3_1 + i3_2)
                        oc_block = T.axis.spatial(32, i4_0 + i4_1 + i4_2 + i4_3)
                        ic = T.axis.reduce(64, i5_0 * 16 + i5_1)
                        kh = T.axis.reduce(1, i6_0 + i6_1)
                        kw = T.axis.reduce(1, i7_1 + i7_0)
                        T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                        T.writes(conv2d_NCHWc_global[n, oc_chunk, oh, ow, oc_block])
                        T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                        with T.init():
                            conv2d_NCHWc_global[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                        conv2d_NCHWc_global[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc_global[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(1, 2, 1, 1, 1):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(1, ax0)
                        v1 = T.axis.spatial(8, i1_1 * 2 + ax1)
                        v2 = T.axis.spatial(56, i2_0 * 8 + i2_1 + ax2)
                        v3 = T.axis.spatial(56, i3_1 + ax3)
                        v4 = T.axis.spatial(32, i4_0 + ax4)
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 4, 2, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[7, 8, 1, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 56, 1, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[32, 1, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[4, 16])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b62, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2023-02-16 14:18:36 [INFO] [task_scheduler.cc:168] Design space #1:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 16, 56, 56, 4), "float32"], p1: T.Buffer[(8, 16, 1, 1, 4, 32), "float32"], conv2d_NCHWc: T.Buffer[(1, 8, 56, 56, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":64, "meta_schedule.vectorize":64})
            conv2d_NCHWc_global = T.alloc_buffer([1, 8, 56, 56, 32], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0 in T.grid(1, 1, 7, 1, 32):
                for i0_1, i1_1, i2_1, i3_1, i4_1, i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(1, 4, 8, 56, 1, 4, 1, 1, 1, 2, 1, 1, 1, 16, 1, 1, 1, 1, 1, 1, 1):
                    with T.block("conv2d_NCHWc"):
                        n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                        oc_chunk = T.axis.spatial(8, i1_3 + i1_0 * 8 + i1_1 * 2 + i1_2)
                        oh = T.axis.spatial(56, i2_0 * 8 + i2_1 + i2_2 + i2_3)
                        ow = T.axis.spatial(56, i3_3 + i3_0 * 56 + i3_1 + i3_2)
                        oc_block = T.axis.spatial(32, i4_0 + i4_1 + i4_2 + i4_3)
                        ic = T.axis.reduce(64, i5_0 * 16 + i5_1)
                        kh = T.axis.reduce(1, i6_0 + i6_1)
                        kw = T.axis.reduce(1, i7_1 + i7_0)
                        T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                        T.writes(conv2d_NCHWc_global[n, oc_chunk, oh, ow, oc_block])
                        T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                        with T.init():
                            conv2d_NCHWc_global[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                        conv2d_NCHWc_global[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc_global[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(1, 8, 8, 56, 1):
                    with T.block("conv2d_NCHWc_global"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(56, i2_0 * 8 + ax2)
                        v3 = T.axis.spatial(56, ax3)
                        v4 = T.axis.spatial(32, i4_0 + ax4)
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 4, 2, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[7, 8, 1, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 56, 1, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[32, 1, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[4, 16])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b62, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2023-02-16 14:18:36 [INFO] [task_scheduler.cc:168] Design space #2:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 16, 56, 56, 4), "float32"], p1: T.Buffer[(8, 16, 1, 1, 4, 32), "float32"], conv2d_NCHWc: T.Buffer[(1, 8, 56, 56, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":16, "meta_schedule.vectorize":64})
            for i0_0, i1_0, i2_0, i3_0, i4_0, i0_1, i1_1, i2_1, i3_1, i4_1, i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(1, 1, 7, 1, 32, 1, 4, 8, 56, 1, 4, 1, 1, 1, 2, 1, 1, 1, 16, 1, 1, 1, 1, 1, 1, 1):
                with T.block("conv2d_NCHWc"):
                    n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                    oc_chunk = T.axis.spatial(8, i1_3 + i1_0 * 8 + i1_1 * 2 + i1_2)
                    oh = T.axis.spatial(56, i2_0 * 8 + i2_1 + i2_2 + i2_3)
                    ow = T.axis.spatial(56, i3_3 + i3_0 * 56 + i3_1 + i3_2)
                    oc_block = T.axis.spatial(32, i4_0 + i4_1 + i4_2 + i4_3)
                    ic = T.axis.reduce(64, i5_0 * 16 + i5_1)
                    kh = T.axis.reduce(1, i6_0 + i6_1)
                    kw = T.axis.reduce(1, i7_1 + i7_0)
                    T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                    T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                    T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                    conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 4, 2, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[7, 8, 1, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 56, 1, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[32, 1, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[4, 16])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v62 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v62)
2023-02-16 14:20:37 [INFO] [task_scheduler.cc:158] Initializing Task #7: "fused_nn_contrib_conv2d_NCHWc_3"
2023-02-16 14:20:37 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 16, 56, 56, 4), "float32"], p1: T.Buffer[(8, 16, 1, 1, 4, 32), "float32"], conv2d_NCHWc: T.Buffer[(1, 8, 56, 56, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        for i0, i1, i2, i3, i4, i5, i6, i7 in T.grid(1, 8, 56, 56, 32, 64, 1, 1):
            with T.block("conv2d_NCHWc"):
                n, oc_chunk, oh, ow, oc_block, ic, kh, kw = T.axis.remap("SSSSSRRR", [i0, i1, i2, i3, i4, i5, i6, i7])
                T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                with T.init():
                    conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
    

2023-02-16 14:20:37 [INFO] [task_scheduler.cc:162] Total 3 design space(s) generated
2023-02-16 14:20:37 [INFO] [task_scheduler.cc:168] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 16, 56, 56, 4), "float32"], p1: T.Buffer[(8, 16, 1, 1, 4, 32), "float32"], conv2d_NCHWc: T.Buffer[(1, 8, 56, 56, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":64, "meta_schedule.vectorize":64})
            conv2d_NCHWc_global = T.alloc_buffer([1, 8, 56, 56, 32], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0, i0_1, i1_1, i2_1, i3_1, i4_1 in T.grid(1, 4, 2, 2, 1, 1, 2, 7, 1, 2):
                for i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(1, 1, 1, 1, 1, 2, 7, 16, 64, 1, 1, 1, 1, 2, 4, 1):
                    with T.block("conv2d_NCHWc"):
                        n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                        oc_chunk = T.axis.spatial(8, i1_2 + i1_3 + i1_0 * 2 + i1_1)
                        oh = T.axis.spatial(56, i2_0 * 28 + i2_1 * 4 + i2_2 * 2 + i2_3)
                        ow = T.axis.spatial(56, i3_0 * 28 + i3_1 * 28 + i3_2 * 4 + i3_3)
                        oc_block = T.axis.spatial(32, i4_0 * 32 + i4_1 * 16 + i4_2 + i4_3)
                        ic = T.axis.reduce(64, i5_0 * 64 + i5_1)
                        kh = T.axis.reduce(1, i6_0 + i6_1)
                        kw = T.axis.reduce(1, i7_1 + i7_0)
                        T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                        T.writes(conv2d_NCHWc_global[n, oc_chunk, oh, ow, oc_block])
                        T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                        with T.init():
                            conv2d_NCHWc_global[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                        conv2d_NCHWc_global[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc_global[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(1, 1, 4, 28, 16):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(1, ax0)
                        v1 = T.axis.spatial(8, i1_0 * 2 + i1_1 + ax1)
                        v2 = T.axis.spatial(56, i2_0 * 28 + i2_1 * 4 + ax2)
                        v3 = T.axis.spatial(56, i3_0 * 28 + ax3)
                        v4 = T.axis.spatial(32, i4_1 * 16 + ax4)
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[4, 2, 1, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 7, 2, 2])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 7, 4])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 16, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[1, 64])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b62, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2023-02-16 14:20:37 [INFO] [task_scheduler.cc:168] Design space #1:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 16, 56, 56, 4), "float32"], p1: T.Buffer[(8, 16, 1, 1, 4, 32), "float32"], conv2d_NCHWc: T.Buffer[(1, 8, 56, 56, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":0, "meta_schedule.vectorize":64})
            conv2d_NCHWc_global = T.alloc_buffer([1, 8, 56, 56, 32], dtype="float32")
            for i0_0, i1_0, i2_0, i3_0, i4_0 in T.grid(1, 4, 2, 2, 1):
                for i0_1, i1_1, i2_1, i3_1, i4_1, i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(1, 2, 7, 1, 2, 1, 1, 1, 1, 1, 2, 7, 16, 64, 1, 1, 1, 1, 2, 4, 1):
                    with T.block("conv2d_NCHWc"):
                        n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                        oc_chunk = T.axis.spatial(8, i1_2 + i1_3 + i1_0 * 2 + i1_1)
                        oh = T.axis.spatial(56, i2_0 * 28 + i2_1 * 4 + i2_2 * 2 + i2_3)
                        ow = T.axis.spatial(56, i3_0 * 28 + i3_1 * 28 + i3_2 * 4 + i3_3)
                        oc_block = T.axis.spatial(32, i4_0 * 32 + i4_1 * 16 + i4_2 + i4_3)
                        ic = T.axis.reduce(64, i5_0 * 64 + i5_1)
                        kh = T.axis.reduce(1, i6_0 + i6_1)
                        kw = T.axis.reduce(1, i7_1 + i7_0)
                        T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                        T.writes(conv2d_NCHWc_global[n, oc_chunk, oh, ow, oc_block])
                        T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                        with T.init():
                            conv2d_NCHWc_global[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                        conv2d_NCHWc_global[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc_global[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(1, 2, 28, 28, 32):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(1, ax0)
                        v1 = T.axis.spatial(8, i1_0 * 2 + ax1)
                        v2 = T.axis.spatial(56, i2_0 * 28 + ax2)
                        v3 = T.axis.spatial(56, i3_0 * 28 + ax3)
                        v4 = T.axis.spatial(32, ax4)
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[4, 2, 1, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 7, 2, 2])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 7, 4])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 16, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[1, 64])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b62, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2023-02-16 14:20:37 [INFO] [task_scheduler.cc:168] Design space #2:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(1, 16, 56, 56, 4), "float32"], p1: T.Buffer[(8, 16, 1, 1, 4, 32), "float32"], conv2d_NCHWc: T.Buffer[(1, 8, 56, 56, 32), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel":96, "meta_schedule.unroll_explicit":16, "meta_schedule.vectorize":64})
            for i0_0, i1_0, i2_0, i3_0, i4_0, i0_1, i1_1, i2_1, i3_1, i4_1, i5_0, i6_0, i7_0, i0_2, i1_2, i2_2, i3_2, i4_2, i5_1, i6_1, i7_1, i0_3, i1_3, i2_3, i3_3, i4_3 in T.grid(1, 4, 2, 2, 1, 1, 2, 7, 1, 2, 1, 1, 1, 1, 1, 2, 7, 16, 64, 1, 1, 1, 1, 2, 4, 1):
                with T.block("conv2d_NCHWc"):
                    n = T.axis.spatial(1, i0_0 + i0_1 + i0_2 + i0_3)
                    oc_chunk = T.axis.spatial(8, i1_2 + i1_3 + i1_0 * 2 + i1_1)
                    oh = T.axis.spatial(56, i2_0 * 28 + i2_1 * 4 + i2_2 * 2 + i2_3)
                    ow = T.axis.spatial(56, i3_0 * 28 + i3_1 * 28 + i3_2 * 4 + i3_3)
                    oc_block = T.axis.spatial(32, i4_0 * 32 + i4_1 * 16 + i4_2 + i4_3)
                    ic = T.axis.reduce(64, i5_0 * 64 + i5_1)
                    kh = T.axis.reduce(1, i6_0 + i6_1)
                    kw = T.axis.reduce(1, i7_1 + i7_0)
                    T.reads(p0[n, ic // 4, oh + kh, ow + kw, ic % 4], p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block])
                    T.writes(conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block])
                    T.block_attr({"meta_schedule.tiling_structure":"SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = T.float32(0)
                    conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] = conv2d_NCHWc[n, oc_chunk, oh, ow, oc_block] + p0[n, ic // 4, oh + kh, ow + kw, ic % 4] * p1[oc_chunk, ic // 4, kh, kw, ic % 4, oc_block]
    

b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[4, 2, 1, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 7, 2, 2])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 7, 4])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 16, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[1, 64])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v62 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v62)
2023-02-16 14:27:41 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-02-16 14:27:41 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2023-02-16 14:27:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3125ea98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3be740e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3be8c448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1f3be0d8)]: 0 failure(s)
2023-02-16 14:27:42 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2023-02-16 14:27:43 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3125ea98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3be740e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3be8c448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1f3be0d8)]: 0 failure(s)
2023-02-16 14:27:44 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3125ea98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3be740e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3be8c448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1f3be0d8)]: 0 failure(s)
2023-02-16 14:27:44 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3125ea98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3be740e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3be8c448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1f3be0d8)]: 0 failure(s)
2023-02-16 14:27:45 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3125ea98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3be740e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3be8c448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1f3be0d8)]: 0 failure(s)
2023-02-16 14:27:45 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9994  0.9990  0.9984  0.9977  0.9975  0.9960  0.9957  0.9956  0.9954  0.9951  0.9941  0.9933  0.9932  0.9928  0.9926  0.9921
[17 : 32]:	0.9915  0.9911  0.9898  0.9885  0.9878  0.9872  0.9871  0.9870  0.9867  0.9866  0.9864  0.9862  0.9858  0.9857  0.9857  0.9850
[33 : 48]:	0.9844  0.9839  0.9838  0.9824  0.9821  0.9819  0.9819  0.9816  0.9816  0.9814  0.9805  0.9805  0.9804  0.9792  0.9787  0.9783
[49 : 64]:	0.9782  0.9782  0.9780  0.9777  0.9770  0.9767  0.9760  0.9752  0.9741  0.9737  0.9736  0.9735  0.9723  0.9719  0.9714  0.9702
2023-02-16 14:27:45 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-02-16 14:27:45 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #1: GFLOPs: 13.9914. Time: 7344.5565 us. Best GFLOPs: 13.9914
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #2: GFLOPs: 65.7399. Time: 1563.1376 us. Best GFLOPs: 65.7399
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #3: GFLOPs: 28.6550. Time: 3586.1321 us. Best GFLOPs: 65.7399
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #4: GFLOPs: 137.5208. Time: 747.2359 us. Best GFLOPs: 137.5208
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #5: GFLOPs: 74.9534. Time: 1370.9915 us. Best GFLOPs: 137.5208
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #6: GFLOPs: 41.7619. Time: 2460.6286 us. Best GFLOPs: 137.5208
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #7: GFLOPs: 28.9076. Time: 3554.7856 us. Best GFLOPs: 137.5208
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #8: GFLOPs: 17.4458. Time: 5890.2587 us. Best GFLOPs: 137.5208
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #9: GFLOPs: 163.9709. Time: 626.6994 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #10: GFLOPs: 42.8400. Time: 2398.7050 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #11: GFLOPs: 109.2038. Time: 940.9967 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #12: GFLOPs: 12.7791. Time: 8041.2711 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #13: GFLOPs: 18.2086. Time: 5643.5068 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #14: GFLOPs: 23.4948. Time: 4373.7597 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #15: GFLOPs: 17.1622. Time: 5987.5901 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #16: GFLOPs: 6.5386. Time: 15715.9962 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #17: GFLOPs: 35.2306. Time: 2916.7979 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #18: GFLOPs: 15.0684. Time: 6819.6202 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #19: GFLOPs: 35.6031. Time: 2886.2781 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #20: GFLOPs: 16.8792. Time: 6087.9963 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #21: GFLOPs: 69.4723. Time: 1479.1562 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #22: GFLOPs: 66.0429. Time: 1555.9661 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #23: GFLOPs: 27.0461. Time: 3799.4583 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #24: GFLOPs: 18.0326. Time: 5698.5899 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #25: GFLOPs: 14.6672. Time: 7006.1571 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #26: GFLOPs: 29.8504. Time: 3442.5159 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #27: GFLOPs: 47.0336. Time: 2184.8308 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #28: GFLOPs: 33.3194. Time: 3084.0998 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #29: GFLOPs: 48.0217. Time: 2139.8754 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #30: GFLOPs: 85.7094. Time: 1198.9408 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #31: GFLOPs: 50.6467. Time: 2028.9659 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #32: GFLOPs: 106.9647. Time: 960.6950 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #33: GFLOPs: 159.2777. Time: 645.1652 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #34: GFLOPs: 30.8517. Time: 3330.7830 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #35: GFLOPs: 103.0829. Time: 996.8721 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #36: GFLOPs: 24.5640. Time: 4183.3797 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #37: GFLOPs: 15.6288. Time: 6575.0610 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #38: GFLOPs: 19.7227. Time: 5210.2567 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #39: GFLOPs: 24.1838. Time: 4249.1405 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #40: GFLOPs: 103.8897. Time: 989.1305 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #41: GFLOPs: 109.7006. Time: 936.7354 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #42: GFLOPs: 25.3801. Time: 4048.8558 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #43: GFLOPs: 108.3648. Time: 948.2822 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #44: GFLOPs: 45.7633. Time: 2245.4755 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #45: GFLOPs: 29.1774. Time: 3521.9150 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #46: GFLOPs: 26.8197. Time: 3831.5261 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #47: GFLOPs: 100.1446. Time: 1026.1203 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #48: GFLOPs: 33.3073. Time: 3085.2258 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #49: GFLOPs: 20.9165. Time: 4912.8804 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #50: GFLOPs: 68.5400. Time: 1499.2776 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #51: GFLOPs: 48.9363. Time: 2099.8801 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #52: GFLOPs: 12.9920. Time: 7909.5012 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #53: GFLOPs: 14.9102. Time: 6891.9343 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #54: GFLOPs: 30.1014. Time: 3413.8089 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #55: GFLOPs: 22.5874. Time: 4549.4533 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #56: GFLOPs: 40.6110. Time: 2530.3571 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #57: GFLOPs: 31.0740. Time: 3306.9589 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #58: GFLOPs: 143.2937. Time: 717.1315 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #59: GFLOPs: 23.5330. Time: 4366.6554 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #60: GFLOPs: 26.5012. Time: 3877.5772 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #61: GFLOPs: 74.1312. Time: 1386.1967 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #62: GFLOPs: 129.4419. Time: 793.8734 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #63: GFLOPs: 100.5259. Time: 1022.2283 us. Best GFLOPs: 163.9709
2023-02-16 15:36:15 [INFO] [task_scheduler.cc:129] [Task #7: fused_nn_contrib_conv2d_NCHWc_3] Trial #64: GFLOPs: 63.4229. Time: 1620.2413 us. Best GFLOPs: 163.9709
